{"version":3,"sources":["initial/_root.scss","../node_modules/accoutrement-scale/sass/_type.scss","../node_modules/accoutrement-type/sass/_fonts.scss","config/_scale.scss","../node_modules/accoutrement-scale/sass/_size.scss","../node_modules/accoutrement-type/sass/_a11y.scss","initial/_headings.scss","config/_colors.scss","initial/_icons.scss","config/_arrow.scss","../node_modules/accoutrement-layout/sass/_z-index.scss","component/_banner.scss","../node_modules/accoutrement-type/sass/_pseudo-elements.scss","component/_index.scss","../node_modules/accoutrement-color/sass/_api.scss","../node_modules/accoutrement-scale/sass/_utility.scss","component/_item.scss","../node_modules/accoutrement-layout/sass/_queries.scss","../node_modules/accoutrement-scale/sass/_units.scss","../node_modules/accoutrement-layout/sass/_stretch.scss","component/_nav.scss","../node_modules/accoutrement-color/sass/_utils.scss","component/_project-meta.scss","../node_modules/accoutrement-color/sass/_contrast.scss"],"names":[],"mappings":"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","file":"theme.css","sourcesContent":["// Root\n// ====\n\n:root {\n  @include baseline;\n  @include font-family('sans');\n  font-size: calc(size('root') + 0.25vw);\n  line-height: map-get($ratios, 'herman');\n}\n\n\n// Links\n// -----\n\n[href] {\n  #{$link} {\n    color: color('action');\n    text-decoration: none;\n  }\n\n  #{$focus} {\n    color: color('focus');\n    text-decoration: underline;\n  }\n}\n\n\n// Code\n// ----\npre,\ncode {\n  @include font-family('code');\n  font-size: size('code');\n}\n\ncode {\n  background-color: color('slight');\n  border-radius: 3px;\n  box-shadow: 0 0 size('half-shim') color('code-shadow') inset;\n  color: color('code');\n  display: inline-block;\n  padding: 0 size('half-shim');\n\n  pre & {\n    background-color: transparent;\n    border-radius: 0;\n    box-shadow: none;\n    display: block;\n    padding: 0;\n  }\n}\n\n.visually-hidden {\n  @include is-hidden;\n}\n","// Type\n// ====\n\n\n// Get Lines [function]\n// --------------------\n/// Determine the number of typographic \"lines\" required\n/// for a given font size and rhythm.\n///\n/// @access private\n///\n/// @param {String | Length | List} $size -\n///   The name, length, or calculations required\n///   for defining the font-size.\n/// @param {String | Length | List} $rhythm -\n///   The name, length, or calculations required\n///   for defining the typographic rhythm.\n@function _get-lines(\n  $size: 'root',\n  $rhythm: 'rhythm'\n) {\n  $font-size: size($size);\n  $line-height: size($rhythm);\n\n  @if (not comparable($font-size, $line-height)) {\n    $font-size: convert-units($font-size, 'px');\n    $line-height: convert-units($line-height, 'px');\n  }\n\n  @return ceil(2 * $font-size / $line-height) / 2;\n}\n\n\n// Font Size [mixin]\n// -----------------\n/// Set the font-size and line-height of an element\n/// based on size configurations and typographic rhythm.\n///\n/// @group type\n///\n/// @param {String | Length | List} $size -\n///   The name, length, or calculations required\n///   for defining the font-size.\n/// @param {Number} $lines [false] -\n///   Optionally override the number of typographic lines needed.\n/// @output -\n///   Requested `font-size` with appropriate `line-height`.\n@mixin font-size(\n  $size,\n  $lines: false\n) {\n  $rhythm: size('rhythm');\n  $height: ($lines or _get-lines($size)) * $rhythm;\n  $size: size($size);\n\n  @if not $lines and ($size == $height) {\n    $height: $height + ($rhythm / 2);\n  }\n\n  font-size: $size;\n  line-height: $height;\n}\n\n\n// Browser Ems [function]\n// ----------------------\n/// Convert any comparable size into browser-default ems\n/// usable in media-queries.\n///\n/// @group type\n///\n/// @param {String | Length | List} $size -\n///   The name, length, or calculations required\n///   for defining the font-size.\n/// @return {Length} -\n///   The given size, converted to `16px`-based `em` units.\n@function browser-ems(\n  $size\n) {\n  $size: size($size, 'px');\n\n  @return $size / $_BROWSER-DEFAULT-FONT-SIZE * 1em;\n}\n\n\n// Baseline [mixin]\n// ----------------\n/// Set the root font-size as a percentage of the browser default,\n/// along with an appropriate line-height in `em` units.\n///\n/// @group type\n///\n/// @param {String | Length | List} $size ['root'] -\n///   The name, length, or calculations required\n///   for defining the font-size.\n/// @param {String | Length | List} $rhythm ['rhythm'] -\n///   The name, length, or calculations required\n///   for defining the typographic rhythm.\n/// @output -\n///   Requested `font-size` as a percentage of the browser default\n///   with appropriate `line-height` set in `em` units.\n@mixin baseline(\n  $size: 'root',\n  $rhythm: 'rhythm'\n) {\n  $size: size($size, 'px');\n\n  font-size: percentage($size / $_BROWSER-DEFAULT-FONT-SIZE);\n  line-height: size($rhythm, 'em');\n}\n","// Fonts API\n// =========\n\n\n// Font Formats\n// ------------\n/// The file formats to include when importing a font-face.\n/// @group config\n/// @type List\n$font-formats: 'woff' 'ttf' !default;\n\n\n// Font Path\n// ---------\n/// The path to your fonts directory,\n/// often relative to your output CSS.\n/// @group config\n/// @type String\n$font-path: '../fonts/' !default;\n\n\n// Fonts\n// -----\n/// A map for managing all your fonts on a project.\n/// @group config\n/// @type Map\n/// @prop {Map} <key> -\n///   Give each font a key for access in the code,\n///   with a nested map defining the font details.\n/// @prop {String} <key>.name [<key>] -\n///   The actual name of the font-face,\n///   if it's different from the given <key>.\n/// @prop {List} <key>.stack -\n///   A list of fallback fonts\n///   for browsers that can't load the given webfont.\n/// @prop {String} <key>.<variant> -\n///   Add keys for each font-variant\n///   (normal, bold, italic, bold italic, etc):\n///   - local path values will have `$font-path` prepended,\n///     and `$font-formats` appended for loading.\n///   - `false` values will not be loaded.\n///     Use this option to document variants that will be injected by a CDN\n///     like Typekit or Google Fonts.\n/// @example scss -\n///   $fonts: (\n///     '<key>': (\n///       '<local variant>': 'path/to-font-name',\n///       '<pathless variant>': false,\n///     ),\n///     'sans': (\n///       'name': 'FranklinGothic',\n///       'stack': ('Helvetica', 'Arial', 'sans-serif'),\n///       'regular': 'franklingothic-regular-filename',\n///       'bold': 'franklingothic-bold-filename',\n///       'bold' 'italic': 'franklingothic-bolditalic-filename',\n///     ),\n///   );\n$fonts: () !default;\n\n\n// Font-URL [function]\n// -------------------\n/// Get a CSS-ready URL function (`url('my/path')`) with\n/// the full path to a file in the fonts directory.\n/// @group fonts\n/// @param {String} $path -\n///   A path relative to the fonts directory.\n/// @return {String} -\n///   The full path to a font file, in CSS `url('my/path')` format.\n@function font-url(\n  $path\n) {\n  $full-path: quote($font-path + $path);\n  @return url($full-path);\n}\n\n\n// Font Family [function]\n// ----------------------\n/// Access a font-family from your `$fonts` map.\n/// @group fonts\n/// @param {String} $key -\n///   The key-name of a font in your `$fonts` map.\n/// @return {String} -\n///   The full font-stack for the given font,\n///   ready for output with the `font-family` property.\n@function font-family(\n  $key\n) {\n  $font: map-get($fonts, $key);\n  $name: map-get($font, 'name') or $key;\n  @return join($name, map-get($font, 'stack'), 'comma');\n}\n\n\n// Font Family [mixin]\n// -------------------\n/// Output a font-stack to font-family based on your `$fonts` configuration.\n/// @group fonts\n/// @param {String} $key -\n///   The key-name of a font in your `$fonts` map.\n@mixin font-family(\n  $key\n) {\n  font-family: font-family($key);\n}\n\n\n// Font Face [mixin]\n// -----------------\n/// Import any local webfont defined in your `$fonts` configuration\n/// (variants without a path will not be imported).\n/// @group fonts\n/// @param {String} $key -\n///   The key-name of a font in your `$fonts` map.\n/// @param {List} $formats [$font-formats] -\n///   The font file formats (e.g. 'ttf', 'otf', 'woff') to import.\n///   Font files will be imported in the order given.\n@mixin font-face(\n  $key,\n  $formats: $font-formats\n) {\n  $var-options: join($_font-style-options, $_font-weight-options);\n  $var-options: join($var-options, ('normal', 'regular'));\n  $font: _font-get($key);\n  $name: $key;\n  $variants: ();\n\n  @each $key, $value in $font {\n    $first: nth($key, 1);\n\n    @if ($first == 'name') {\n      $name: $value;\n    } @else if index($var-options, $first) {\n      $variants: map-merge($variants, ($key: $value));\n    }\n  }\n\n  @if (length($variants) > 0) {\n    @each $variant, $path in $variants {\n      $variant: if(($variant == 'regular'), 'normal', $variant);\n\n      @if $path {\n        @include _import-font-face($name, $path, $variant, $formats);\n      }\n    }\n  }\n}\n\n\n// Import WebFonts [mixin]\n// -----------------------\n/// Import webfonts from your font config list.\n/// @group fonts\n/// @param {Map} $fonts [$fonts] -\n///   A map of your font configuration.\n/// @param {List} $formats [$font-formats] -\n///   The font file formats (e.g. 'ttf', 'otf', 'woff') to import.\n///   Font files will be imported in the order given.\n@mixin import-webfonts(\n  $fonts: $fonts,\n  $formats: $font-formats\n) {\n  @each $key, $value in $fonts {\n    @if type-of($value) == 'map' {\n      @include font-face($key, $font-formats);\n    }\n  }\n}\n","// Scale Settings\n// ==============\n\n@import '../../node_modules/accoutrement-scale/sass/scale';\n\n\n// Text Ratios\n// -----------\n/// A set of standard ratios\n/// for creating text rhythm and modular-scales.\n///\n/// @group scale\n/// @preview ratios\n/// @link http://oddbird.net/accoutrement-scale/sassdoc/\n///   Accoutrement Scale\n/// @example scss\n///   // @preview ratios;\n///   @include herman-add-ratios('text-ratios', $text-ratios);\n$text-ratios: (\n  'herman': 1.4\n);\n\n@include herman-add-ratios('text-ratios', $text-ratios);\n\n\n// Text Sizes\n// ----------\n/// A set of standard text sizes.\n///\n/// @group scale\n/// @preview sizes\n/// @link http://oddbird.net/accoutrement-scale/sassdoc/\n///   Accoutrement Scale\n/// @example scss\n///   // @preview sizes;\n///   @include herman-add-sizes('text-sizes', $text-sizes);\n$text-sizes: (\n  'root': 18px,\n\n  'large-rem': 20px ('convert-units': 'rem'),\n  'base-rem': 'root' ('convert-units': 'rem'),\n  'small-rem': 16px ('convert-units': 'rem'),\n\n  'large': calc(%s + %s) ('base-rem', 1.5vw),\n  'base': calc(%s + %s) ('small-rem', 0.5vw),\n  'small': calc(%s + %s) ('small-rem', 0.25vw),\n  'code': calc(0.75rem + 0.25vw),\n\n  'h1': calc(%s + %s) ('base-rem', 2.5vw),\n  'h2': calc(%s + %s) ('base-rem', 2vw),\n  'h3': 'large',\n);\n\n@include herman-add-sizes('text-sizes', $text-sizes);\n\n\n// Spacing Sizes\n// -------------\n/// A set of standard spacing sizes.\n///\n/// @group scale\n/// @preview sizes; style: ruler\n/// @link http://oddbird.net/accoutrement-scale/sassdoc/\n///   Accoutrement Scale\n/// @example scss\n///   // @preview sizes; style: ruler\n///   @include herman-add-sizes('spacing-sizes', $spacing-sizes);\n$spacing-sizes: (\n  'rhythm': 'root' ('herman': 1, 'convert-units': 'rem'),\n  'gutter': 'rhythm',\n  'flex-gutter': calc(%s + %s) ('shim', 2.5vw),\n  'double-gutter': 'gutter' ('linear': 2),\n  'spacer': 'gutter' ('linear': 3),\n  'double-spacer': 'spacer' ('linear': 2),\n  'shim': 'gutter' ('linear': 0.5),\n  'half-shim': 'shim' ('linear': 0.5),\n  'quarter-shim': 'shim' ('linear': 0.25)\n);\n\n@include herman-add-sizes('spacing-sizes', $spacing-sizes);\n\n\n// Pattern Sizes\n// -------------\n/// A set of pattern-specific sizes,\n/// that can be applied to various components.\n///\n/// @group scale\n/// @preview sizes; style: output-only\n/// @link http://oddbird.net/accoutrement-scale/sassdoc/\n///   Accoutrement Scale\n/// @example scss\n///   // @preview sizes; style: output-only\n///   @include herman-add-sizes('pattern-sizes', $pattern-sizes);\n$pattern-sizes: (\n  'border': 8px,\n  'page': 50rem,\n\n  'nav-small': 21rem,\n  'nav-medium': 32rem,\n\n  'project-link-nav': 36rem,\n  'specimen': 'rhythm' ('linear': 3),\n  'color-swatch': 'rhythm' ('linear': 4),\n  'icon': 28px,\n  'nav-underline': 4px,\n);\n\n@include herman-add-sizes('pattern-sizes', $pattern-sizes);\n","// Base API\n// ========\n\n\n// Size [function]\n// ---------------\n/// Access a named size in your `$sizes` map,\n/// using any comparable units.\n///\n/// @group sizes\n///\n/// @param {String | Length | List} $size -\n///   The name of a size in your configuration (e.g. `line-height`),\n///   or a length to be converted into different units (e.g. `24px`),\n///   or a base-size and adjustments to be made\n///   (e.g. `24px ('minor-third': 2)`),\n///   or a `calc(%s + %s) ('root', 'rhythm')` recipie\n///   for building `calc` values.\n///   For the sake of consistent documentation,\n///   I recommend keeping adjustments in the configuration\n///   whenever possible.\n/// @param {String} $unit [null] -\n///   The desired units for the output (e.g. `px` or `rem`).\n/// @throw -\n///   The calculated value is not a valid CSS length.\n/// @return {Length} -\n///   The calculated length, in the requested units.\n@function size(\n  $size,\n  $unit: null\n) {\n  // Parse arguments\n  $size: map-get($sizes, $size) or $size;\n  $base: nth($size, 1);\n  $adjust: if(length($size) > 1, nth($size, 2), null);\n\n  // Recursive check\n  $size: if(map-has-key($sizes, $base), size($base, false), $base);\n\n  // Adjustments\n  $adjust-type: type-of($adjust);\n  $calc: (type-of($size) == 'string') and (str-slice($size, 1, 5) == 'calc(');\n\n  @if (not $calc) and ($adjust-type == 'map') {\n    @each $key, $value in $adjust {\n      $size: _ac-scale-adjust-size($size, $key, $value);\n    }\n  } @else if $calc and ($adjust-type == 'list') {\n    $values: ();\n\n    @each $value in $adjust {\n      $values: append($values, size($value));\n    }\n\n    $size: _ac-interpolate($base, $values...);\n  }\n\n\n  // Validation\n  @if (type-of($size) == 'number') or $calc {\n    $size: if($unit, convert-units($size, $unit), $size);\n    @return $size;\n  }\n\n  @error '#{$size} is not a valid length for CSS.';\n}\n\n\n// Negative [function]\n// -------------------\n/// Return the negative value of any length,\n/// in comparable units.\n///\n/// @group sizes\n///\n/// @param {String | Length | List} $size -\n///   The name of a size in your configuration (e.g. `line-height`),\n///   or a length to be converted into different units (e.g. `24px`),\n///   or a base-size and adjustments to be made\n///   (e.g. `24px ('minor-third': 2)`).\n///   For the sake of consistent documentation,\n///   I recommend keeping adjustments in the configuration\n///   whenever possible.\n/// @param {String} $unit [null] -\n///   The desired units for the output (e.g. `px` or `rem`).\n/// @return {Length} -\n///   The calculated negative length, in the requested units.\n@function negative(\n  $size,\n  $unit: null\n) {\n  @return 0 - size($size, $unit);\n}\n\n\n// Square [mixin]\n// --------------\n/// Create a square by setting equal CSS `height` and `width` properties\n/// with the given size & unit value.\n///\n/// @group sizes\n///\n/// @param {String | Length | List} $size -\n///   The name of a size in your configuration (e.g. `line-height`),\n///   or a length to be converted into different units (e.g. `24px`),\n///   or a base-size and adjustments to be made\n///   (e.g. `24px ('minor-third': 2)`).\n///   For the sake of consistent documentation,\n///   I recommend keeping adjustments in the configuration\n///   whenever possible.\n/// @param {String} $unit [null] -\n///   The desired units for the output (e.g. `px` or `rem`).\n/// @output -\n///   Equal CSS height and width properties,\n///   set to the given size and units.\n@mixin square(\n  $size,\n  $unit: null\n) {\n  $size: size($size, $unit);\n\n  height: $size;\n  width: $size;\n}\n\n\n\n// Adjust Size\n// ===========\n/// Calculate ratio, linear, or arbitrary adjustments\n/// to a base size.\n///\n/// @access private\n///\n/// @param {Number} $size -\n///   The original size to perform adjusments on\n/// @param {String | Number} $key -\n///   The adjustment to perform,\n///   given as either a numeric ratio,\n///   named ratio keyword,\n///   or function name to call.\n/// @param {Any} $value -\n///   Any required adjustment arguments,\n///   such as the number of times to apply a ratio,\n///   or additional arguments to be passed to a function.\n/// @return {Number} -\n///   Results of the adjustment.\n@function _ac-scale-adjust-size(\n  $size,\n  $key,\n  $value\n) {\n  $ratio: _get-ratio($key);\n\n  @if $ratio == 'linear' {\n    @return $size * $value;\n  } @else if (type-of($ratio) == 'number') {\n    $multiplier: _accoutrement-pow($ratio, $value);\n    @return $size * $multiplier;\n  } @else if (type-of($key) == 'function') or function-exists($key) {\n    $function: _ac-scale-get-function($key);\n    $args: if($value, ($size, $value), $size);\n    @return call($function, $args...);\n  }\n\n  @error '#{$key} is not a valid ratio or function for adusting sizes.';\n}\n\n\n","// Hidden\n// ======\n\n\n// Is Hidden -- Position\n// ---------------------\n/// Hide an element by positioning it off the page.\n/// @group a11y\n/// @access private\n@mixin is-hidden--position {\n  left: -9999px;\n  position: absolute;\n  top: -9999px;\n}\n\n\n// Is Hidden -- Clip\n// -----------------\n/// Hide an element by clipping it in place.\n/// @group a11y\n/// @access private\n@mixin is-hidden--clip {\n  clip: rect(1px, 1px, 1px, 1px);\n  clip-path: inset(1px 1px 1px 1px);\n  height: 1px;\n  overflow: hidden;\n  position: absolute;\n  width: 1px;\n}\n\n\n// Is Hidden\n// ---------\n/// Hide an element using either the `clip` or `position` method.\n/// @group a11y\n/// @param {'clip' | 'position'} $method ['clip'] -\n///   The hiding method to use.\n@mixin is-hidden(\n  $method: 'clip'\n) {\n  @if $method == 'position' {\n    @include is-hidden--position;\n  } @else {\n    @include is-hidden--clip;\n  }\n}\n","// Headings\n// ========\n\n\n// Application\n// -----------\n\n[data-sassdoc='project-title'] {\n  align-items: baseline;\n  display: flex;\n  font-size: size('h1');\n  margin-left: auto;\n  margin-right: auto;\n}\n\n[data-sassdoc='project-name'] {\n  padding-left: size('half-shim');\n  padding-right: size('half-shim');\n\n  &,\n  #{$link} {\n    color: color('theme-dark');\n  }\n\n  #{$focus} {\n    color: color('focus');\n    text-decoration: none;\n  }\n}\n","// Color Settings\n// ==============\n\n@import '../../node_modules/mathsass/dist/math';\n@import '../../node_modules/accoutrement-color/sass/color';\n\n\n// Brand Colors\n// ------------\n/// We use bright primary colors for the main brand,\n/// everything else is based on these colors.\n/// @preview color-palette\n/// @group colors\n/// @type Map\n/// @prop {Color | String | List} '<color-name>' -\n///   Each `<color-name>` key can be assigned a color\n///   or previously-defined key,\n///   followed by an optional map of adjustments\n///   (as defined in\n///   [Accoutrement-Color](http://oddbird.net/accoutrement-color/sassdoc/)).\n/// @link http://oddbird.net/accoutrement-color/sassdoc/\n///   Accoutrement Color\n/// @example scss\n///   // @preview color-palette\n///   @include herman-add-colors('brand-colors', $brand-colors);\n$brand-colors: (\n  'brand-orange': hsl(24, 100%, 39%),\n  'brand-blue': hsl(195, 85%, 35%),\n  'brand-pink': hsl(330, 85%, 48%),\n);\n\n@include herman-add-colors('brand-colors', $brand-colors);\n\n\n// Neutral Colors\n// --------------\n/// Use these neutral colors\n/// to create structure and hierarchy in the document.\n/// @preview color-palette\n/// @group colors\n/// @link http://oddbird.net/accoutrement-color/sassdoc/\n///   Accoutrement Color\n/// @example scss\n///   // @preview color-palette\n///   @include herman-add-colors('neutral-colors', $neutral-colors);\n$neutral-colors: (\n  'light-gray': 'brand-blue' ('tint': 80%, 'desaturate': 80%),\n  'gray': 'brand-blue' ('desaturate': 80%),\n  'black': 'brand-blue' ('shade': 30%, 'desaturate': 80%),\n);\n\n@include herman-add-colors('neutral-colors', $neutral-colors);\n\n\n// Status Colors\n// -------------\n/// These status colors for UI elements\n/// give a quick sense of progress, warning, or errors.\n/// @preview color-palette\n/// @group colors\n/// @link http://oddbird.net/accoutrement-color/sassdoc/\n///   Accoutrement Color\n/// @example scss\n///   // @preview color-palette\n///   @include herman-add-colors('status-colors', $status-colors);\n$status-colors: (\n  'go': hsl(75, 65%, 30%),\n  'yield': 'brand-orange',\n  'stop': hsl(0, 85%, 50%),\n);\n\n@include herman-add-colors('status-colors', $status-colors);\n\n\n// Theme Colors\n// ------------\n/// Applying the brand and accent colors\n/// to a sitewide theme.\n/// @preview color-palette\n/// @group colors\n/// @link http://oddbird.net/accoutrement-color/sassdoc/\n///   Accoutrement Color\n/// @example scss\n///   // @preview color-palette\n///   @include herman-add-colors('theme-colors', $theme-colors);\n$theme-colors: (\n  'theme-dark': 'brand-blue',\n  'theme-light': 'brand-blue' ('tint': 80%),\n\n  'background': #fff,\n  'text': 'black',\n  'text-light': 'gray',\n  'border': 'gray',\n  'light-border': 'light-gray',\n  'callout': 'light-gray',\n  'overlay': 'callout' ('rgba': 0.9),\n  'shadow': 'gray' ('rgba': 0.5),\n  'action': 'theme-dark',\n  'focus': 'action' ('shade': 25%),\n  'active': 'action',\n  'accent': 'brand-pink',\n  'slight': 'light-gray' ('tint': 90%),\n  'code': hsl(196, 23%, 45%),\n  'code-shadow': 'code' (rgba: 0.2),\n);\n\n@include herman-add-colors('theme-colors', $theme-colors);\n\n\n// System Colors\n// -------------\n/// Colors used by accoutrement-color\n/// to calculate contrast ratios.\n/// @group colors\n/// @link http://oddbird.net/accoutrement-color/sassdoc/\n///   Accoutrement Color\n$system-colors: (\n  'contrast-light': 'background',\n  'contrast-dark': 'text',\n);\n\n@include herman-add-colors('system-colors', $system-colors);\n","// Icons\n// =====\n\n[data-icon-size='icon-small'] {\n  @include square('icon');\n}\n","// Section Arrow\n// =============\n\n/// Apply a top-border with centered down-arrow triangle,\n/// for use as a section-divider.\n/// @group sections\n/// @parameter {color | string} $color ['theme-dark'] -\n///   The color of the border/arrow line\n/// @parameter {color | string} $background ['background'] -\n///   The background color above the border/arrow,\n///   used to make it an arrow-outline rather than a solid triangle\n/// @example scss\n///   [data-styleguide='section-arrow'] {\n///     @include section-arrow;\n///   }\n/// @example html\n///   <header data-sassdoc-region=\"banner\"></header>\n@mixin section-arrow(\n  $color: 'theme-dark',\n  $background: 'background'\n) {\n  border-bottom: size('border') solid color($color);\n  display: block;\n  position: relative;\n  width: 100%;\n\n  @include wrap-content(' ') {\n    border: size('gutter') solid transparent;\n    border-bottom-width: 0;\n    border-top-color: color($color);\n    left: 50%;\n    position: absolute;\n    top: 100%;\n  }\n\n  @include before(' ') {\n    margin-top: size('border');\n    transform: translateX(-50%) translateY(-2px);\n  }\n\n  @include after(' ') {\n    border-top-color: color($background);\n    transform: translateX(-50%) translateY(-4px);\n  }\n}\n","// Z-Index\n// =======\n\n\n// Z-Index\n// -------\n/// A list of named z-index layers, from lowest to highest index.\n/// Nest lists (one level deep) for different z-index contexts.\n/// @type List\n/// @group z-index\n/// @example scss -\n///   $z-index: (\n///     'main',\n///     'sidebar',\n///     'banner' 'active-nav' 'dropdown',\n///     'message',\n///     'modal',\n///   );\n$z-index: ();\n\n\n// Z-Index [function]\n// ------------------\n/// Return the numeric index of a named layer in your `$z-index` variable.\n/// @group z-index\n/// @param {String} $layer -\n///   The name of a z-index layer in your configuration.\n/// @require {Variable} $z-index\n/// @return {Number} -\n///   The z-index value associated with the given layer in your configuration.\n@function z-index(\n  $layer\n) {\n  $index: index($z-index, $layer);\n  $nested: null;\n\n  @if $index {\n    @return $index;\n  } @else {\n    @for $i from 1 through length($z-index) {\n      $stack: nth($z-index, $i);\n      $index: $i;\n      $nested: index($stack, $layer);\n\n      @if type-of($nested) == 'number' {\n        @if $nested == 1 {\n          @return $index;\n        } @else if $nested > 1 {\n          @return $nested;\n        }\n      }\n    }\n  }\n\n  @if type-of($layer) != 'number' {\n    @error '#{$layer} is not a valid z-index.';\n  }\n\n  @return $layer;\n}\n\n\n// Z-Index [mixin]\n// ---------------\n/// Output the `z-index` property and value of a given layer\n/// in your `$z-index` configuration.\n/// @group z-index\n/// @param {String} $layer -\n///   The name of a z-index layer in your configuration.\n/// @output -\n///   The z-index property with a value based on your configuration.\n@mixin z-index(\n  $layer\n) {\n  z-index: z-index($layer);\n}\n","// Banner Theme\n// ============\n\n[data-sassdoc-region='banner'] {\n  @include section-arrow;\n  @include z-index('banner');\n  box-shadow: 0 2px 2px color('shadow');\n  display: flex;\n  padding: size('shim');\n}\n\n[data-sassdoc='project-version'] {\n  @include font-family('sans');\n  color: color('text-light');\n  font-size: size('base');\n  font-weight: normal;\n}\n","// Pseudo Elements\n// ===============\n\n\n// Before\n// ------\n/// Add generated content `:before` an element.\n/// @group pseudo\n/// @param {String} $content -\n///   A value for the `content` property.\n@mixin before(\n  $content\n) {\n  &:before {\n    content: $content;\n    @content;\n  }\n}\n\n\n// After\n// -----\n/// Add generated content `:after` an element.\n/// @group pseudo\n/// @param {String} $content -\n///   A value for the `content` property.\n@mixin after(\n  $content\n) {\n  &:after {\n    content: $content;\n    @content;\n  }\n}\n\n\n// Wrap Content\n// ------------\n/// Add generated content `:before` and `:after` an element.\n/// @group pseudo\n/// @param {List} $content -\n///   One or two values to be used for the `content` property.\n///   A single string will be used `:before` and `:after`.\n@mixin wrap-content(\n  $content: '“' '”'\n) {\n  $_before: nth($content, 1);\n\n  &:before,\n  &:after {\n    content: $_before;\n    @content;\n  }\n\n  @if length($content) > 1 {\n    &:after { content: nth($content, 2); }\n  }\n}\n","// Index Styles\n// ============\n\n[data-sassdoc-page='index'] {\n  color: color('black');\n\n  h1,\n  h2,\n  h3,\n  h4 {\n    color: color('black');\n    margin-bottom: size('shim');\n  }\n\n  h1 {\n    font-size: size('h2');\n  }\n\n  h2 {\n    font-size: size('h3');\n  }\n\n  p {\n    margin: size('gutter') 0;\n  }\n}\n","// Color API\n// =========\n\n\n// Color\n// -----\n/// Access any color in your palette,\n/// or generate new colors on the fly.\n///\n/// @group colors\n///\n/// @parameter {string | list} $color -\n///   The name of a color in your palette,\n///   or a valid css color-value,\n///   with optional adjustments\n///   in the form of `<origin-color> (<function>: <args...>)`.\n///\n/// @parameter {Map} $palette [$colors] -\n///   A map containing the source color-palette\n///   for accessing previously-defined colors.\n///\n/// @return {Color} -\n///   A calculated css-ready color,\n///   based on your global color palette and adjustments.\n@function color(\n  $color,\n  $palette: $colors\n) {\n  // Parse arguments\n  $color: map-get($palette, $color) or $color;\n  $base: nth($color, 1);\n  $adjust: if(length($color) > 1, nth($color, 2), ());\n\n  // Recursive check\n  $color: if(map-has-key($palette, $base), color($base), $base);\n\n  // Adjustments\n  @each $function, $value in $adjust {\n    $function: _ac-color-get-function($function);\n    $color: call($function, $color, $value...);\n  }\n\n  @return $color;\n}\n","// Utilities\n// =========\n\n$_LOCAL-FUNCTIONS: (\n  'add', 'plus',\n  'minus', 'subtract',\n  'times', 'multiply',\n  'divide'\n);\n\n\n// Get Function\n// ------------\n/// Get a first-class function in Sass 3.5+,\n/// or the function name string (unchanged)\n/// in older Sass versions.\n/// This is safe to use internally,\n/// as it allows users to pass in\n/// either a string, or a previously-captured function.\n///\n/// @access private\n///\n/// @param {String | Function} $function -\n///   The name (string) of a function,\n///   or the function to be called.\n/// @return {String | Function} -\n///   Returns a first-class function in Sass 3.5+,\n///   or the function name string in older Sass versions.\n@function _ac-scale-get-function(\n  $function\n) {\n  $type: type-of($function);\n\n  @if ($type == 'function') {\n    @return $function;\n  }\n\n  @if ($type == 'string') and function-exists('get-function') {\n    @if index($_LOCAL-FUNCTIONS, $function) {\n      @return get-function($function);\n    }\n\n    @error '[#{$type}] `#{$function}` must be a first-class function';\n  }\n\n  @return $function;\n}\n\n\n// Format String\n// -------------\n/// Define your own format-string\n/// for building `calc(%s + %s) ('root', 'rhythm')` recipies.\n///\n/// @group config\n/// @type string\n///\n/// @example scss -\n///   $ac-format-string: '@@@';\n$ac-format-string: '%s';\n\n\n// String Replace\n// --------------\n/// Return a string, with a substring replaced\n///\n/// @access private\n///\n/// @param {string} $string -\n///   The original string to be edited\n/// @param {string} $old -\n///   A sub-string to replace\n/// @param {string} $new -\n///   A new sub-string to replace the old\n/// @return {string} -\n///   Original string, with substring replaced\n@function _ac-str-replace(\n  $string,\n  $old,\n  $new: null,\n  $replace-all: false\n) {\n  $return: $string;\n  $i: str-index($string, $old);\n  $n: str-length($old);\n\n  @if $string == $old {\n    $return: $new;\n  } @else if $i {\n    $a: if($i > 1, str-slice($string, 1, $i - 1), '');\n    $z: str-slice($string, $i + $n);\n\n    @if $replace-all {\n      $z: _ac-str-replace($z, $old, $new, true);\n    }\n\n    $return: $a + if($new, $new, '') + $z;\n  }\n\n  @return $return;\n}\n\n\n// Interpolate\n// -----------\n/// Return a string with interpolated values\n/// replacing `%s` format strings\n///\n/// @access private\n///\n/// @param {string} $string -\n///   The original string to be edited\n/// @param {strings} $values... -\n///   New strings, to replace the `%s` format strings\n/// @return {string} -\n///   Original string, with `%s` format strings replaced\n@function _ac-interpolate(\n  $string,\n  $values...\n) {\n  $_return: $string;\n\n  @each $val in $values {\n    @if str-index($_return, $ac-format-string) {\n      $_return: _ac-str-replace($_return, $ac-format-string, $val);\n    } @else {\n      @warn 'Too many values passed for interpolation with \"#{$string}\".';\n    }\n  }\n\n  @return $_return;\n}\n","// Item Styles\n// ===========\n\n.item {\n  margin-bottom: size('double-spacer');\n}\n\n[data-item-section] {\n  margin-bottom: size('double-gutter');\n}\n\n[data-item-section='header'] {\n  margin: size('gutter') 0;\n}\n\n.item-title {\n  font-size: size('h3');\n}\n\n.item-subtitle {\n  border-bottom: 1px solid color('light-border');\n  color: color('text-light');\n  font-size: size('small');\n  font-weight: normal;\n  letter-spacing: 0.05em;\n  margin-bottom: size('shim');\n  text-transform: uppercase;\n}\n\n.item-type,\n.item-name,\n.item-value,\n.alias-title {\n  @include font-family('code');\n  display: inline-block;\n}\n\n.item-type,\n.item-value,\n.value-type,\n.item-note {\n  color: color('text-light');\n  display: inline-block;\n  font-weight: normal;\n}\n\n.alias {\n  color: color('text-light');\n  font-style: italic;\n}\n\n.alias-title {\n  font-style: normal;\n  font-weight: bold;\n}\n\n.param-list {\n  margin-bottom: size('shim');\n}\n\n.param-title {\n  color: color('text-light');\n  font-size: size('base');\n}\n\n.param-details {\n  margin-top: size('half-shim');\n\n  @include above('nav-medium') {\n    margin-left: size('gutter');\n  }\n}\n\n.text-block {\n  max-width: 80ch;\n\n  p {\n    margin-bottom: size('gutter');\n  }\n}\n\n.summary-subtitle {\n  color: color('text-light');\n  margin: size('gutter') 0 size('half-shim');\n}\n\n\n// Requires\n// --------\n.requires-wrapper {\n  @include above('nav-medium') {\n    display: flex;\n\n    [data-item-section] {\n      flex: 1 1 40%;\n      max-width: 100%;\n\n      &:first-child {\n        margin-right: size('gutter');\n      }\n    }\n  }\n}\n","// Media Queries\n// =============\n\n\n\n// Accoutrement Query Context\n// --------------------------\n$accoutrement-query-context: ();\n\n\n\n// Get Breakpoint [function]\n// -------------------------\n@function _get-breakpoint(\n  $break\n) {\n  @if variable-exists('breakpoints') and map-get($breakpoints, $break) {\n    $break: map-get($breakpoints, $break) or $break;\n\n    @if map-has-key($breakpoints, $break) {\n      $break: _get-breakpoint($break);\n    }\n  }\n\n  @if function-exists('size') and map-get($sizes, $break) {\n    $break: size($break);\n  }\n\n  @if type-of($break) != 'number' {\n    @error '\"#{$break}\" isn\\'t a valid breakpoint length or user-defined keyword.';\n  }\n\n  @if function-exists('browser-ems') {\n    @return browser-ems($break);\n  }\n\n  @return $break;\n}\n\n\n\n// Apply Query [mixin]\n// -------------------\n@mixin _apply-query(\n  $name,\n  $query\n) {\n  $context: ($name: $query);\n  $context: map-merge($accoutrement-query-context, $context);\n  $accoutrement-query-context: $context !global;\n\n  @media #{$query} {\n    @content;\n  }\n\n  $accoutrement-query-context: map-remove($accoutrement-query-context, $name) !global;\n}\n\n\n\n// Below [mixin]\n// -------------\n@mixin below(\n  $max,\n  $prop: 'width'\n) {\n  $name: 'below `#{$max}`';\n  $max: _get-breakpoint($max);\n\n  @if unit($max) == 'em' {\n    $max: $max - 0.01;\n  } @else if comparable($max, 1px) {\n    $max: $max - 1px;\n  }\n\n  $query: '(max-#{$prop}: #{$max})';\n\n  @include _apply-query($name, $query) {\n    @content;\n  }\n}\n\n\n\n// Above [mixin]\n// -------------\n@mixin above(\n  $min,\n  $prop: 'width'\n) {\n  $name: 'above `#{$min}`';\n  $min: _get-breakpoint($min);\n  $query: '(min-#{$prop}: #{$min})';\n\n  @include _apply-query($name, $query) {\n    @content;\n  }\n}\n\n\n\n// Between [mixin]\n// ---------------\n@mixin between(\n  $min,\n  $max,\n  $prop: 'width'\n) {\n  $name: 'between `#{$min}` and `#{$max}`';\n  $min: _get-breakpoint($min);\n  $max: _get-breakpoint($max);\n\n  @if unit($max) == 'em' {\n    $max: $max - 0.01;\n  } @else if comparable($max, 1px) {\n    $max: $max - 1px;\n  }\n\n  $query: '(min-#{$prop}: #{$min}) and (max-#{$prop}: #{$max})';\n\n  @include _apply-query($name, $query) {\n    @content;\n  }\n}\n","// Unit Helpers\n// ------------\n\n\n// Get PX [function]\n// -----------------\n/// If a value can be converted to px by Sass, do it.\n///\n/// @access private\n///\n/// @param {Number} $length -\n///   The number to be converted to px if comparable.\n/// @return {Number | false} -\n///   Either the `px` value of the converted `$length` or `false`.\n@function _get-px(\n  $length\n) {\n  @return if(comparable($length, 1px), 0px + $length, false);\n}\n\n\n// Get Number [function]\n// ---------------------\n/// Get a `0`-value for any absolute unit.\n///\n/// @access private\n///\n/// @param {String} $unit -\n///   The unit to return as a number.\n/// @return {Number | false} -\n///   Either the `0` value of a unit or `false`.\n@function _get-number(\n  $unit,\n  $relative: false\n) {\n  $_absolute: (\n    'in': 0in,\n    'mm': 0mm,\n    'cm': 0cm,\n    'pt': 0pt,\n    'pc': 0pc,\n    'px': 0px,\n  );\n\n  $_relative: (\n    'em': 0em,\n    'rem': 0rem,\n    '%': 0%,\n    'ex': 0ex,\n    'ch': 0ch,\n    'vw': 0vw,\n    'vh': 0vh,\n    'vmin': 0vmin,\n    'vmax': 0vmax,\n    'fr': 0fr,\n  );\n\n  @if $relative {\n    @return map-get($_absolute, $unit) or map-get($_relative, $unit);\n  }\n\n  @return map-get($_absolute, $unit);\n}\n\n\n// Convert Units [function]\n// ------------------------\n/// Convert lengths between most units.\n///\n/// @group units\n///\n/// @param {Number} $length -\n///   The length to be converted\n/// @param {String} $to-unit -\n///   The desired units to convert to.\n///   Some units (`ch`, `vw`, `vh`, `vmin`, `vmax`) cannot be converted.\n/// @param {Number} $from-context [$_BROWSER-DEFAULT-FONT-SIZE] -\n///   When converting from relative units,\n///   the absolute length (in px) to which $length refers -\n///   e.g. for `$lengths` in em units, would normally be the\n///   font-size of the current element.\n/// @param {Number} $to-context [$from-context] -\n///   For converting *to* relative units,\n///   the absolute length in px to which the output value will refer.\n///   Defaults to the same as `$from-context`, since it is rarely needed.\n@function convert-units(\n  $length,\n  $to-unit,\n  $from-context: $_BROWSER-DEFAULT-FONT-SIZE,\n  $to-context: $from-context\n) {\n  $_convertable: ('in', 'mm', 'cm', 'pt', 'pc', 'px', 'em', 'rem', '%', 'ex');\n  $from-unit: unit($length);\n\n  // Optimize for cases where `from` and `to` units are accidentally the same.\n  @if $from-unit == $to-unit {\n    @return $length;\n  }\n\n  @if ($from-unit == '') {\n    @return _get-number($to-unit, 'allow-relative') + $length;\n  } @else if ($to-unit == '') {\n    @return $length / ($length * 0 + 1);\n  }\n\n  // Warn and escape when units are not convertable\n  @each $units in ($from-unit, $to-unit) {\n    @if not index($_convertable, $units) {\n      @warn '`#{$units}` units can not be reliably converted; Returning original value.';\n      @return $length;\n    }\n  }\n\n  // Optomize comparable (non-relative) units\n  $absolute-output: _get-number($to-unit);\n\n  @if $absolute-output and comparable($length, $absolute-output)  {\n    @return $absolute-output + $length;\n  }\n\n  // Establish relative context\n  $root-size: map-get($sizes, 'root') or $_BROWSER-DEFAULT-FONT-SIZE;\n  $from-context: _get-px($from-context);\n  $to-context: _get-px($to-context);\n\n  // Context values must be in px\n  @if (not $from-context) or (not $to-context) {\n    @error 'Context paremeters must resolve to a value in pixel units.';\n  }\n\n  // Convert relative length to pixels\n  $px-length: _get-px($length) or $length;\n  $from-unit: unit($px-length);\n\n  // Convert relative units using the from-context parameter.\n  @if $from-unit == 'em' {\n    $px-length: $length * $from-context / 1em;\n  } @else if $from-unit == 'rem' {\n    $px-length: $length * $root-size / 1rem;\n  } @else if $from-unit == '%' {\n    $px-length: $length * $from-context / 100%;\n  } @else if $from-unit == 'ex'  {\n    $px-length: $length * $from-context / 2ex;\n  }\n\n  // Convert length in pixels to the output unit\n  @if $absolute-output {\n    @return $absolute-output + $px-length;\n  } @else if $to-unit == 'em' {\n    @return $px-length * 1em / $to-context;\n  } @else if $to-unit == 'rem' {\n    @return $px-length * 1rem / $root-size;\n  } @else if $to-unit == '%' {\n    @return $px-length * 100% / $to-context;\n  } @else if $to-unit == 'ex' {\n    @return $px-length * 2ex / $to-context;\n  }\n\n  @error 'Failed to convert #{$length} into #{$to-units}.';\n}\n","// Stretch Utilities\n// =================\n\n\n// Stretch\n// -------\n/// Stretch a positioned element in relation to its context.\n/// @group stretch\n/// @param {Number} $top [0] -\n///   Offset from the top edge.\n/// @param {Number} $right [$top] -\n///   Offset from the right edge.\n/// @param {Number} $bottom [$top] -\n///   Offset from the bottom edge.\n/// @param {Number} $left [$right] -\n///   Offset from the left edge.\n/// @param {absolute | fixed} $position [absolute] -\n///   The type of positioning to use.\n@mixin stretch(\n  $top: 0,\n  $right: $top,\n  $bottom: $top,\n  $left: $right,\n  $position: absolute\n) {\n  bottom: $bottom or null;\n  left: $left or null;\n  position: $position or null;\n  right: $right or null;\n  top: $top or null;\n}\n\n\n// Stretch\n// -------\n/// Stretch a positioned element horizontally in relation to its context.\n/// @group stretch\n/// @param {Number} $left [0] -\n///   Offset from the left edge.\n/// @param {Number} $right [$left] -\n///   Offset from the right edge.\n/// @param {absolute | fixed} $position [absolute] -\n///   The type of positioning to use.\n@mixin stretch-x(\n  $left: 0,\n  $right: $left,\n  $position: absolute\n) {\n  @include stretch(false, $right, false, $left, $position);\n}\n\n\n// Stretch\n// -------\n/// Stretch a positioned element vertically in relation to its context.\n/// @group stretch\n/// @param {Number} $top [0] -\n///   Offset from the top edge.\n/// @param {Number} $bottom [$top] -\n///   Offset from the bottom edge.\n/// @param {absolute | fixed} $position [absolute] -\n///   The type of positioning to use.\n@mixin stretch-y(\n  $top: 0,\n  $bottom: $top,\n  $position: absolute\n) {\n  @include stretch($top, false, $bottom, false, $position);\n}\n","// Navigation Styles\n// =================\n\n\n[data-nav-menu='small'] {\n  @include stretch(0, null, 0, null, absolute);\n  box-shadow: 0 0 size('half-shim') color('shadow');\n  transform: translatex(-102%);\n  transition: transform 0.4s;\n  width: 100%;\n\n  &[aria-expanded='true'] {\n    transform: translatex(0);\n  }\n\n  @include below('nav-small') {\n    align-content: flex-start;\n    display: flex;\n    flex-direction: row;\n    flex-wrap: wrap;\n  }\n\n  @include above('nav-small') {\n    width: auto;\n  }\n\n  @include above('page') {\n    display: none;\n  }\n}\n\n[data-nav-menu='large'] {\n  flex: 0 1 0;\n  margin-left: -100%;\n  transition: margin-left 0.4s;\n\n  &[aria-expanded='true'] {\n    margin-left: 0;\n  }\n\n  @include below('page') {\n    display: none;\n  }\n}\n\n[data-nav-toggle='small'] {\n  @include above('page') {\n    display: none;\n  }\n}\n\n[data-nav-toggle='large'] {\n  @include below('page') {\n    display: none;\n  }\n}\n\n[data-nav-toggle] {\n  fill: color('theme-dark');\n  padding: size('half-shim');\n\n  @include above('page') {\n    padding-left: size('shim');\n    padding-right:  size('shim');\n  }\n\n  #{$focus} {\n    fill: color('focus');\n  }\n}\n\n\n[data-sassdoc='nav-item'] {\n  list-style: none;\n  margin-bottom: size('shim');\n\n  @include below('nav-small') {\n    width: 50%;\n\n    &:nth-of-type(2n) {\n      padding-right: 1rem;\n    }\n  }\n}\n\n// Nav Titles\n// ----------\n[data-sassdoc='nav-title'] {\n  font-weight: bold;\n  margin: size('half-shim') 0 size('shim');\n  padding-top: size('shim');\n  width: 100%;\n\n  // add a top separator to all but the first nav-title\n  &:nth-of-type(n+2) {\n    border-top: 1px solid color('theme-light');\n    margin-top: size('gutter');\n    padding-top: size('gutter');\n  }\n}\n\n\n// Nav Links\n// ---------\n/// Navigation items, with inactive and active states.\n/// @group layout\n/// @example html\n///   <a href=\"#\" data-sassdoc-nav=\"is-not-active\">not active</a>\n///   <a href=\"#\" data-sassdoc-nav=\"is-active\">active</a>\n[data-sassdoc-nav] {\n  #{$link} {\n    color: color('background');\n    line-height: 1.1;\n    padding-bottom: size('quarter-shim');\n    position: relative;\n    text-decoration: none;\n    transition: color 0.4s;\n\n    // Animated underlines\n    @include before('') {\n      @include stretch(auto, auto, 0, 0);\n      background: color('theme-light');\n      height: size('nav-underline');\n      transform: scale3d(0, 1, 1);\n      transform-origin: center left;\n      transition: transform 0.4s cubic-bezier(0.22, 0.61, 0.36, 1);\n      transition-delay: 0.2s;\n      width: 100%;\n    }\n  }\n\n  #{$focus} {\n    @include before('') {\n      transform: scale3d(1, 1, 1);\n      transition-delay: 0s;\n    }\n  }\n\n  &[data-sassdoc-nav='is-active'] {\n    #{$link},\n    #{$focus} {\n      @include before('') {\n        transform: scale3d(1, 1, 1);\n        transition-delay: 0s;\n      }\n    }\n  }\n}\n","// Color Utilities\n// ===============\n\n\n// Tint\n// ----\n/// Mix a color with `white` to get a lighter tint.\n///\n/// @group util\n///\n/// @param {String | list} $color -\n///   The name of a color in your palette,\n///   with optional adjustments in the form of `(<function-name>: <args>)`.\n/// @param {Percentage} $percentage -\n///   The percentage of white to mix in.\n///   Higher percentages will result in a lighter tint.\n/// @return {Color} -\n///   A calculated css-ready color-value based on your global color palette.\n@function tint(\n  $color,\n  $percentage\n) {\n  $color: color($color);\n\n  @return mix(#fff, $color, $percentage);\n}\n\n\n// Shade\n// -----\n/// Mix a color with `black` to get a darker shade.\n///\n/// @group util\n///\n/// @param {String | list} $color -\n///   The name of a color in your palette,\n///   with optional adjustments in the form of `(<function-name>: <args>)`.\n/// @param {Percentage} $percentage -\n///   The percentage of black to mix in.\n///   Higher percentages will result in a darker shade.\n/// @return {Color} -\n///   A calculated css-ready color-value based on your global color palette.\n@function shade(\n  $color,\n  $percentage\n) {\n  $color: color($color);\n\n  @return mix(#000, $color, $percentage);\n}\n\n\n// Get Function\n// ------------\n/// Get a first-class function in Sass 3.5+,\n/// or the function name string (unchanged)\n/// in older Sass versions.\n/// This is safe to use internally,\n/// as it allows users to pass in\n/// either a string, or a previously-captured function.\n///\n/// @access private\n///\n/// @param {String | Function} $function -\n///   The name (string) of a function,\n///   or the function to be called.\n/// @return {String | Function} -\n///   Returns a first-class function in Sass 3.5+,\n///   or the function name string in older Sass versions.\n@function _ac-color-get-function(\n  $function\n) {\n  $type: type-of($function);\n\n  @if ($type == 'function') {\n    @return $function;\n  } @else if ($type == 'string') {\n    @if function-exists('get-function') {\n      @return get-function($function);\n    }\n\n    @return $function;\n  }\n\n  @error 'Invalid function-name, [#{$type}] `#{$function}` must be a function or string';\n}\n","// Project Meta Styles\n// ===================\n\n\n.project-links {\n  display: flex;\n  justify-content: flex-end;\n  margin-left: 0;\n  margin-right: 0;\n\n  @include below('project-link-nav') {\n    margin-bottom: size('shim');\n  }\n}\n\n.project-link-item {\n  display: flex;\n  list-style: none;\n\n  & + & {\n    margin-left: size('shim');\n  }\n}\n\n.project-link-start {\n  @include below('project-link-nav') {\n    margin-right: auto;\n  }\n}\n\n.project-link {\n  border: 1px solid color('theme-dark');\n  border-radius: size('gutter');\n  font-size: size('small');\n  line-height: 1.6;\n  padding: size('half-shim') size('gutter');\n  text-align: center;\n  transition: background-color 0.4s;\n\n  #{$focus} {\n    @include contrasted('theme-dark');\n    text-decoration: none;\n  }\n}\n","// Color Contrast\n// ==============\n\n\n// WCAG Contrast\n// -------------\n/// Contrast ratios from the WCAG.\n/// @access private\n$wcag-contrast: (\n  'aa-large': 3,\n  'aa': 4.5,\n  'aaa': 7,\n);\n\n\n// Luminance\n// ---------\n/// Get the WCAG luminance of a color in your palette.\n/// **Warning**: Calculating luminance requires a `pow()` function\n/// like the one available in\n/// [MathSass](https://github.com/terkel/mathsass/blob/master/dist/functions/_pow.scss),\n/// which is not included in this library.\n///\n/// @group contrast\n/// @link http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef\n///\n/// @param {String | list} $color -\n///   The name of a color in your palette,\n///   with optional adjustments in the form of `(<function-name>: <args>)`.\n@function luminance(\n  $color\n) {\n  $color: color($color);\n  $luminance: 0;\n\n  @if not function-exists('pow') {\n    @error 'Luminance and contrast calculations require a `pow()` function '\n    + 'like the one available from MathSass.';\n  }\n\n  @if (type-of($color) != 'color') {\n    @error '`#{$color}` is not a color.';\n  }\n\n  @each $component in 'red' 'green' 'blue' {\n    $value: call($component, $color) / 255;\n\n    @if ($value < 0.03928) {\n      $value: $value / 12.92;\n    } @else {\n      $value: pow((($value + 0.055) / 1.055), 2.4);\n    }\n\n    @if ($component == 'red') {\n      $value: $value * 0.2126;\n    } @else if ($component == 'green') {\n      $value: $value * 0.7152;\n    } @else {\n      $value: $value * 0.0722;\n    }\n\n    $luminance: $luminance + $value;\n  }\n\n  @return $luminance;\n}\n\n\n// Contrast Ratio\n// --------------\n/// Get the WCAG contrast-ratio between any two colors in your palette.\n///\n/// @group contrast\n/// @link http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef\n///\n/// @param {string | list | number} $color -\n///   The name of a color in your palette,\n///   with optional adjustments in the form of `(<function-name>: <args>)`,\n///   or a pre-calculated luminance.\n/// @param {string | list | number} $contrast -\n///   The name of a color to contrast against the first,\n///   with optional adjustments in the form of `(<function-name>: <args>)`,\n///   or a pre-calculated luminance.\n/// @param {'aa' | 'aa-large' | 'aaa' | Number | false} $require [false] -\n///   An optional contrast ratio to require.\n///   The function will throw a warning if the required ratio is not met.\n@function contrast-ratio(\n  $base,\n  $contrast,\n  $require: false\n) {\n  $is-lumins: (type-of($base) == 'number');\n\n  $base-lumin: if($is-lumins, $base, luminance($base));\n  $contrast-lumin: if($is-lumins, $contrast, luminance($contrast));\n\n  $darker: min($base-lumin, $contrast-lumin);\n  $lighter: max($base-lumin, $contrast-lumin);\n\n  $ratio: ($lighter + 0.05) / ($darker + 0.05);\n  $require: map-get($wcag-contrast, $require) or $require;\n\n  @if $require and ($ratio < $require) {\n    @warn 'The contrast ratio between `#{$base}` and `#{$contrast}` is '\n    + '#{$ratio}, but a ratio of #{$require} or more is required.';\n  }\n\n  @return $ratio;\n}\n\n\n// Contrast\n// --------\n/// For any color, select the best contrast among a set of options.\n/// For best results, pass a combination of light and dark colors\n/// to contrast against.\n///\n/// @group contrast\n///\n/// @param {String | list} $color -\n///   The name of a color in your palette,\n///   with optional adjustments in the form of `(<function-name>: <args>)`.\n/// @param {Arglist} $options [#000, #fff] -\n///   Colors to contrast against.\n///   Will use `contrast-light` and `contrast-dark` as defaults\n///   if they are defined in your color palette.\n/// @return {Color} -\n///   Whichever option has the highest contrast-ratio to `$color`.\n@function contrast(\n  $color,\n  $options...\n) {\n  // Establish default options if they are missing\n  @if length($options) == 0 {\n    $options: append($options, map-get($colors, 'contrast-light') or #fff);\n    $options: append($options, map-get($colors, 'contrast-dark') or #000);\n  } @else if length($options) == 1 {\n    @error 'Provide at least two contrasting color options for `contrast()`';\n  }\n\n  // Get the colors and their contrasts\n  $color-val: color($color);\n  $color-lum: luminance($color-val);\n  $color-list: ();\n  $contrast-list: ();\n\n  @each $item in $options {\n    $item: color($item);\n    $luminance: luminance($item);\n    $contrast: contrast-ratio($color-lum, $luminance);\n\n    $color-list: append($color-list, $item);\n    $contrast-list: append($contrast-list, $contrast);\n  }\n\n  // Find the best results\n  $best-ratio: max($contrast-list...);\n  $best-color: nth($color-list, index($contrast-list, $best-ratio));\n\n  @return $best-color;\n}\n\n\n// Contrasted\n// ----------\n/// For any background color,\n/// select the best contrasting text color among a set of options.\n/// For best results, pass a combination of light and dark colors\n/// to contrast against.\n///\n/// @group contrast\n///\n/// @param {String | list} $background -\n///   The name of a color in your palette,\n///   with optional adjustments in the form of `(<function-name>: <args>)`.\n/// @param {Arglist} $options -\n///   Colors to contrast against.\n/// @output -\n///   Sets the `background-color` to `$background`\n///   and the foreground `color` to\n///   whichever option has better contrast against the given background.\n@mixin contrasted(\n  $background,\n  $options...\n) {\n  $background: color($background);\n\n  background-color: $background;\n  color: contrast($background, $options...);\n}\n"]}