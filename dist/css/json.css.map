{"version":3,"file":"json.css","sources":["json.scss","../node_modules/sass-json-export/stylesheets/sass-json-export.scss","../node_modules/sass-json-export/stylesheets/encode/encode.scss","../node_modules/sass-json-export/stylesheets/encode/helpers/_quote.scss","../node_modules/sass-json-export/stylesheets/encode/types/_bool.scss","../node_modules/sass-json-export/stylesheets/encode/types/_color.scss","../node_modules/sass-json-export/stylesheets/encode/types/_list.scss","../node_modules/sass-json-export/stylesheets/encode/types/_map.scss","../node_modules/sass-json-export/stylesheets/encode/types/_number.scss","../node_modules/sass-json-export/stylesheets/encode/types/_string.scss","../node_modules/sass-json-export/stylesheets/encode/types/_null.scss","../node_modules/sass-json-export/stylesheets/encode/api/_json.scss","../node_modules/sass-json-export/stylesheets/encode/mixins/_json.scss","config/_manifest.scss","../node_modules/accoutrement-color/sass/_color.scss","../node_modules/accoutrement-color/sass/_pow.scss","../node_modules/accoutrement-color/sass/_utils.scss","../node_modules/accoutrement-color/sass/_contrast.scss","../node_modules/accoutrement-color/sass/_config.scss","../node_modules/accoutrement-color/sass/_api.scss","../node_modules/accoutrement-scale/sass/_scale.scss","../node_modules/accoutrement-scale/sass/_utility.scss","../node_modules/accoutrement-scale/sass/_pow.scss","../node_modules/accoutrement-scale/sass/_config.scss","../node_modules/accoutrement-scale/sass/_math.scss","../node_modules/accoutrement-scale/sass/_units.scss","../node_modules/accoutrement-scale/sass/_size.scss","../node_modules/accoutrement-type/sass/_type.scss","../node_modules/accoutrement-type/sass/_config.scss","../node_modules/accoutrement-type/sass/_helpers.scss","../node_modules/accoutrement-type/sass/_a11y.scss","../node_modules/accoutrement-type/sass/_fonts.scss","../node_modules/accoutrement-type/sass/_pseudo-elements.scss","../node_modules/sassdoc-theme-herman/scss/_utilities.scss","config/_colors.scss","config/_scale.scss","config/_fonts.scss"],"sourcesContent":["// Export Sass to JSON\n// ===================\n\n@import '../node_modules/sass-json-export/stylesheets/sass-json-export';\n@import 'config/manifest';\n\n\n@include json-encode($herman, comment);\n","// Encoder\n@import 'encode/encode';\n","// Helpers\n@import 'helpers/quote';\n\n// Type specific encoding functions\n@import 'types/bool';\n@import 'types/color';\n@import 'types/list';\n@import 'types/map';\n@import 'types/number';\n@import 'types/string';\n@import 'types/null';\n\n// Public API\n@import 'api/json';\n\n// Mixin to pass the string to the DOM\n@import 'mixins/json';\n","/// Proof quote a value\n/// @access private\n/// @param {*} $value - value to be quoted\n/// @return {String} - quoted value\n\n@function _proof-quote($value) {\n  // $value: to-string($value);\n  @return '\"#{$value}\"';\n}\n","/// Encode a bool to JSON\n/// @access private\n/// @param {Bool} $bool - bool to be encoded\n/// @return {Bool} - encoded bool\n@function _json-encode--bool($boolean) {\n  @return $boolean;\n}\n","/// Encode a color to JSON\n/// @access private\n/// @param {Color} $color - color to be encoded\n/// @return {String} - encoded color\n/// @require {function} _proof-quote\n@function _json-encode--color($color) {\n  @return _proof-quote($color);\n}\n","/// Encode a list to JSON\n/// @access private\n/// @param {List} $list - list to be encoded\n/// @return {String} - encoded list\n/// @require {function} json-encore\n@function _json-encode--list($list) {\n  $str: '';\n\n  @each $item in $list {\n    $str: $str + ', ' + json-encode($item);\n  }\n\n  @return '[' + str-slice($str, 3) + ']';\n}\n","/// Encode a map to JSON\n/// @access private\n/// @param {Map} $map - map to be encoded\n/// @return {String} - encoded map\n/// @require {function} _proof-quote\n/// @require {function} json-encode\n@function _json-encode--map($map) {\n  $str: '';\n\n  @each $key, $value in $map {\n    $str: $str + ', ' + _proof-quote($key) + ': ' + json-encode($value);\n  }\n\n  @return '{' + str-slice($str, 3) + '}';\n}\n","/// Encode a number to JSON\n/// @access private\n/// @param {Number} $number - number to be encoded\n/// @return {String} - encoded number\n/// @require {function} _proof-quote\n@function _json-encode--number($number) {\n  @return if(unitless($number), $number, _proof-quote($number));\n}\n","/// Encode a string to JSON\n/// @access private\n/// @param {String} $string - string to be encoded\n/// @return {String} - encoded string\n/// @require {function} _proof-quote\n@function _json-encode--string($string) {\n  @return _proof-quote($string);\n}\n","/// Encode `null` to JSON\n/// @access private\n/// @param {Null} $null - `null`\n/// @return {String}\n@function _json-encode--null($null) {\n  @return 'null';\n}\n","/// Delay the encoding of ta literal to JSON to a type-specific method\n/// @access public\n/// @param {*} $value - value to be stringified\n/// @throw Unknown type for #{$value} (#{$type}).\n/// @return {String} - JSON encoded string\n/// @require {function} _json-encode--string\n/// @require {function} _json-encode--number\n/// @require {function} _json-encode--list\n/// @require {function} _json-encode--map\n/// @require {function} _json-encode--null\n/// @require {function} _json-encode--color\n/// @require {function} _json-encode--bool\n@function json-encode($value) {\n  $type: type-of($value);\n\n  @if function-exists('_json-encode--#{$type}') {\n    @return call('_json-encode--#{$type}', $value);\n  }\n\n  @error 'Unknown type for #{$value} (#{$type}).';\n}\n","/// JSON.stringify a value and pass it as a font-family of head element\n/// @access public\n/// @param {*} $value - value to be stringified\n/// @param {String} $flag (all) - output driver\n/// @require {function} json-encode\n@mixin json-encode($value, $flag: 'all') {\n  $flag: if(index('all' 'regular' 'media' 'comment', $flag), $flag, 'all');\n  $json: json-encode($value);\n\n  // Persistent comment\n  @if $flag == 'comment' or $flag == 'all' {\n    /*! json-encode: #{$json} */\n  }\n  // Regular property value pair\n  @if $flag == 'regular' or $flag == 'all' {\n    // All browsers except IE8-\n    body {\n      &::before {\n        // This element must be in the render tree to get it via getComputedStyle(document.body, ':before');\n        content: json-encode($value);\n        display: block;\n        height: 0;\n        overflow: hidden;\n        width: 0;\n      }\n    }\n\n    // All browsers except Opera (Presto based)\n    head {\n      font-family: json-encode($value);\n    }\n  }\n\n  // Falsy media query\n  @if $flag == 'media' or $flag == 'all' {\n    @media -json-encode {\n      json {\n        json: $json;\n      }\n    }\n  }\n}\n","// Sass Config\n// ===========\n\n\n@import '../../node_modules/accoutrement-color/sass/color';\n@import '../../node_modules/accoutrement-scale/sass/scale';\n@import '../../node_modules/accoutrement-type/sass/type';\n@import '../../node_modules/sassdoc-theme-herman/scss/utilities';\n\n\n@import 'colors';\n@import 'scale';\n@import 'fonts';\n","// Color Toolkit\n// =============\n\n\n@import 'pow';\n@import 'utils';\n@import 'contrast';\n@import 'config';\n@import 'api';\n","/// ## MathSass Functions\n///\n/// *We borrowed this set of math constants and functions\n/// from Takeru Suzuki's wonderful [MathSass][MathSass] library.\n/// See the full MIT License below…*\n///\n/// [MathSass]: https://github.com/terkel/mathsass/\n/// @access private\n\n\n// Constants\n// ---------\n$_LN2: 0.6931471805599453; // sass-lint:disable-line variable-name-format\n$_SQRT2: 1.4142135623730951; // sass-lint:disable-line variable-name-format\n\n\n/// Returns base to the exponent power.\n///\n/// @access private\n///\n/// @param {Number} $base –\n///   The base number\n/// @param {Number} $exp -\n///   The exponent to which to raise base\n/// @return {Number}\n/// @example scss\n///   /* #{ _acc-pow(4, 2)   } */\n///   /* #{ _acc-pow(4, -2)  } */\n///   /* #{ _acc-pow(4, 0.2) } */\n@function _acc-pow(\n  $base,\n  $exp\n) {\n  @if $exp == floor($exp) {\n    $r: 1;\n    $s: 0;\n    @if $exp < 0 {\n      $exp: $exp * -1;\n      $s: 1;\n    }\n    @while $exp > 0 {\n      @if $exp % 2 == 1 {\n        $r: $r * $base;\n      }\n      $exp: floor($exp * 0.5);\n      $base: $base * $base;\n    }\n    @return if($s != 0, 1 / $r, $r);\n  } @else if $base == 0 and $exp > 0 {\n    @return 0;\n  } @else {\n    $expint: floor($exp);\n    $r1: _acc-pow($base, $expint);\n    $r2: _exp(_acc-log($base) * ($exp - $expint));\n    @return $r1 * $r2;\n  }\n}\n\n\n/// A good approximation for $x close to 0.\n/// @access private\n@function _exp(\n  $x\n) {\n  $ret: 0;\n  $i: 1;\n  @for $n from 0 to 24 {\n    $ret: $ret + $i;\n    $i: $i * $x / ($n + 1);\n  }\n  @return $ret;\n}\n\n\n/// Returns the natural logarithm of a number.\n///\n/// @access private\n///\n/// @param {Number} $x\n/// @param {Number} $b The base number\n/// @example scss\n///   /* #{ _acc-log(2)     } */\n///   /* #{ _acc-log(10)    } */\n///   /* #{ _acc-log(2, 10) } */\n@function _acc-log(\n  $x,\n  $b: null\n) {\n  @if $b != null {\n    @return _acc-log($x) / _acc-log($b);\n  }\n\n  @if $x <= 0 {\n    @return 0 / 0;\n  }\n  $k: nth(_acc-frexp($x / $_SQRT2), 2); // sass-lint:disable-line variable-name-format\n  $x: $x / _acc-ldexp(1, $k);\n\n  @return $_LN2 * $k + _acc-log-approx($x); // sass-lint:disable-line variable-name-format\n}\n\n\n/// a good aproximation for $x close to 1\n/// @access private\n@function _acc-log-approx(\n  $x\n) {\n  $x: ($x - 1) / ($x + 1);\n  $x2: $x * $x;\n  $i: 1;\n  $s: $x;\n  $sp: null;\n  @while $sp != $s {\n    $x: $x * $x2;\n    $i: $i + 2;\n    $sp: $s;\n    $s: $s + $x / $i;\n  }\n  @return 2 * $s;\n}\n\n\n/// Returns a two-element list\n/// containing the normalized fraction and exponent of number.\n///\n/// @access private\n///\n/// @param {Number} $x\n/// @return {List} fraction, exponent\n@function _acc-frexp(\n  $x\n) {\n  $exp: 0;\n  @if $x < 0 {\n    $x: $x * -1;\n  }\n  @if $x < 0.5 {\n    @while $x < 0.5 {\n      $x: $x * 2;\n      $exp: $exp - 1;\n    }\n  } @else if $x >= 1 {\n    @while $x >= 1 {\n      $x: $x / 2;\n      $exp: $exp + 1;\n    }\n  }\n  @return $x, $exp;\n}\n\n\n// Returns $x * 2^$exp\n///\n/// @access private\n///\n/// @param {Number} $x\n/// @param {Number} $exp\n@function _acc-ldexp(\n  $x,\n  $exp\n) {\n  $b: if($exp >= 0, 2, 1 / 2);\n  @if $exp < 0 {\n    $exp: $exp * -1;\n  }\n  @while $exp > 0 {\n    @if $exp % 2 == 1 {\n      $x: $x * $b;\n    }\n    $b: $b * $b;\n    $exp: floor($exp * 0.5);\n  }\n  @return $x;\n}\n\n\n/// ## [Copyright (C) 2013 Takeru Suzuki][MathSass]\n///\n/// Permission is hereby granted, free of charge,\n/// to any person obtaining a copy of this software\n/// and associated documentation files (the \"Software\"),\n/// to deal in the Software without restriction,\n/// including without limitation the rights to use,\n/// copy, modify, merge, publish, distribute, sublicense,\n/// and/or sell copies of the Software,\n/// and to permit persons to whom the Software is furnished to do so,\n/// subject to the following conditions:\n///\n/// The above copyright notice and this permission notice\n/// shall be included in all copies or substantial portions of the Software.\n///\n/// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n/// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO\n/// THE WARRANTIES OF MERCHANTABILITY,\n/// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n/// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n/// BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n/// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n/// OUT OF OR IN CONNECTION WITH THE SOFTWARE\n/// OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n///\n/// [MathSass]: https://github.com/terkel/mathsass/\n/// @access private\n","// Color Utilities\n// ===============\n\n\n// Tint\n// ----\n/// Mix a color with `white` to get a lighter tint.\n///\n/// @group util\n///\n/// @param {String | list} $color -\n///   The name of a color in your palette,\n///   with optional adjustments in the form of `(<function-name>: <args>)`.\n/// @param {Percentage} $percentage -\n///   The percentage of white to mix in.\n///   Higher percentages will result in a lighter tint.\n/// @return {Color} -\n///   A calculated css-ready color-value based on your global color palette.\n@function tint(\n  $color,\n  $percentage\n) {\n  $color: color($color);\n\n  @return mix(#fff, $color, $percentage);\n}\n\n\n// Shade\n// -----\n/// Mix a color with `black` to get a darker shade.\n///\n/// @group util\n///\n/// @param {String | list} $color -\n///   The name of a color in your palette,\n///   with optional adjustments in the form of `(<function-name>: <args>)`.\n/// @param {Percentage} $percentage -\n///   The percentage of black to mix in.\n///   Higher percentages will result in a darker shade.\n/// @return {Color} -\n///   A calculated css-ready color-value based on your global color palette.\n@function shade(\n  $color,\n  $percentage\n) {\n  $color: color($color);\n\n  @return mix(#000, $color, $percentage);\n}\n\n\n// Get Function\n// ------------\n/// Get a first-class function in Sass 3.5+,\n/// or the function name string (unchanged)\n/// in older Sass versions.\n/// This is safe to use internally,\n/// as it allows users to pass in\n/// either a string, or a previously-captured function.\n///\n/// @access private\n///\n/// @param {String | Function} $function -\n///   The name (string) of a function,\n///   or the function to be called.\n/// @return {String | Function} -\n///   Returns a first-class function in Sass 3.5+,\n///   or the function name string in older Sass versions.\n@function _ac-color-get-function(\n  $function\n) {\n  $type: type-of($function);\n  $local: ('tint', 'shade');\n\n  @if ($type == 'function') {\n    @return $function;\n  } @else if ($type == 'string') and function-exists('get-function') {\n    @if index($local, $function) {\n      @return get-function($function);\n    }\n\n    @error '[#{$type}] `#{$function}` must be a first-class function';\n  }\n\n  @return $function;\n}\n","// Color Contrast\n// ==============\n\n\n// WCAG Contrast\n// -------------\n/// These named contrast-ratios are defined by the [WCAG][WCAG].\n///\n/// [WCAG]: http://www.w3.org/TR/2008/REC-WCAG20-20081211/#visual-audio-contrast-contrast\n///\n/// @access private\n$WCAG-CONTRAST: ( // sass-lint:disable-line variable-name-format\n  'AA-large': 3,\n  'AA': 4.5,\n  'AAA': 7,\n);\n\n\n// Contrast\n// --------\n/// For any color, select the best contrast among a set of options.\n/// For best results, pass in a combination of light and dark colors\n/// to contrast against – \n/// or define default `contrast-light` and `contrast-dark` values\n/// in your global `$colors` map.\n///\n/// @group contrast\n///\n/// @param {string | list} $color -\n///   The name or value of a color.\n/// @param {arglist} $options [#000, #fff] -\n///   Two or more colors to contrast against.\n///   This function will choose the best contrast of all the options provided,\n///   or the `contrast-light` and `contrast-dark` defaults\n///   if they are defined in your color palette,\n///   otherwise `white` and `black` are the default options.\n/// @return {color} -\n///   Whichever color-option has the highest contrast-ratio to `$color`.\n///\n/// @example scss - default options\n///   $background: #333;\n///   html {\n///     background: $background;\n///     color: contrast($background);\n///   }\n/// @example scss - explicit options\n///   $background: #333;\n///   html {\n///     background: $background;\n///     color: contrast($background, red, orange, yellow, green, blue, indigo);\n///   }\n@function contrast(\n  $color,\n  $options...\n) {\n  // Establish default options if they are missing\n  @if length($options) == 0 {\n    $options: append($options, map-get($colors, 'contrast-light') or #fff);\n    $options: append($options, map-get($colors, 'contrast-dark') or #000);\n  } @else if length($options) == 1 {\n    @error 'Provide at least two contrasting color options for `contrast()`';\n  }\n\n  // Get the colors and their contrasts\n  $color-val: color($color);\n  $color-lum: luminance($color-val);\n  $color-list: ();\n  $contrast-list: ();\n\n  @each $item in $options {\n    $item: color($item);\n    $luminance: luminance($item);\n    $contrast: contrast-ratio($color-lum, $luminance);\n\n    $color-list: append($color-list, $item);\n    $contrast-list: append($contrast-list, $contrast);\n  }\n\n  // Find the best results\n  $best-ratio: max($contrast-list...);\n  $best-color: nth($color-list, index($contrast-list, $best-ratio));\n\n  @return $best-color;\n}\n\n\n// Contrasted\n// ----------\n/// Apply any background color,\n/// along with the highest-contraast text color from a set of options.\n/// This works the same as the `contrast` function,\n/// but applies the resulting values to `background-color`\n/// and text `color` properties.\n///\n/// @group contrast\n///\n/// @param {string | list} $background -\n///   The name or value of your desired background color.\n/// @param {arglist} $options [#fff, #000] -\n///   A list of colors to contrast against,\n///   defaulting to `white` and `black`\n///   or your `contrast-light` and `contrast-dark` settings\n///   if they are prodided in the global `$colors` map.\n/// @output -\n///   Sets the `background-color` to `$background`\n///   and the foreground `color` to\n///   whichever option has better contrast against the given background.\n///\n/// @example scss - default options\n///   $background: #333;\n///   html {\n///     @include contrasted($background);\n///   }\n/// @example scss - explicit options\n///   $background: #333;\n///   html {\n///     @include contrasted($background, red, orange, yellow, green, blue, indigo);\n///   }\n@mixin contrasted(\n  $background,\n  $options...\n) {\n  $background: color($background);\n\n  background-color: $background;\n  color: contrast($background, $options...);\n}\n\n\n// Contrast Ratio\n// --------------\n/// Compare two colors using the WCAG comparison algorythm,\n/// and return the resulting contrast-ratio.\n/// Optionally pass in a standard (AA, AAA, AA-large)\n/// and return `false` when the contrast-check fails.\n///\n/// - 'AA-large' == `3:1`\n/// - 'AA' == `4.5:1`\n/// - 'AAA' == `7:1`\n///\n/// @group contrast\n/// @link http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef WCAG Contrast Definition\n///\n/// @param {string | list | number} $color -\n///   The name of a color in your palette,\n///   any other color value,\n///   or even a pre-calculated numeric luminance.\n/// @param {string | list | number} $contrast -\n///   The name or value of a color to contrast against the first.\n/// @param {'AA' | 'AA-large' | 'AAA' | number | false} $require [false] -\n///   An optional WCAG contrast ratio to require.\n///   The function will return `false` if the required ratio is not met.\n/// @return {number} -\n///   The WCAG-defined contrast-ratio of two colors.\n///\n/// @example scss\n///   /* black and white: #{contrast-ratio(white, black)} */\n///   /* failed 'AAA': #{contrast-ratio(white, #999, 'AAA')} */\n@function contrast-ratio(\n  $base,\n  $contrast,\n  $require: false\n) {\n  $is-lumins: (type-of($base) == 'number');\n  $uppercase: (\n    'aaa': 'AAA',\n    'aa': 'AA',\n    'aa-large': 'AA-large'\n  );\n\n  $base-lumin: if($is-lumins, $base, luminance($base));\n  $contrast-lumin: if($is-lumins, $contrast, luminance($contrast));\n\n  $darker: min($base-lumin, $contrast-lumin);\n  $lighter: max($base-lumin, $contrast-lumin);\n\n  $ratio: ($lighter + 0.05) / ($darker + 0.05);\n\n  @if (type-of($require) != 'number') {\n    $require: map-get($uppercase, $require) or $require;\n    $require: map-get($WCAG-CONTRAST, $require); // sass-lint:disable-line variable-name-format\n  }\n\n  @if $require and ($ratio < $require) {\n    @return false;\n  }\n\n  @return $ratio;\n}\n\n\n// Luminance\n// ---------\n/// Get the WCAG luminance of a color in your palette.\n///\n/// @group contrast\n/// @link http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef WCAG Relative Luminance\n///\n/// @param {string | list} $color -\n///   The name or value of a color.\n/// @return {number} -\n///   WCAG-defined numeric luminance value.\n@function luminance(\n  $color\n) {\n  $color: color($color);\n  $luminance: 0;\n\n  @if (type-of($color) != 'color') {\n    @error '`#{$color}` is not a color.';\n  }\n\n  @each $component in 'red' 'green' 'blue' {\n    $value: call($component, $color) / 255;\n\n    @if ($value < 0.03928) {\n      $value: $value / 12.92;\n    } @else {\n      $base: ($value + 0.055) / 1.055;\n      $value: _acc-pow($base, 2.4);\n    }\n\n    @if ($component == 'red') {\n      $value: $value * 0.2126;\n    } @else if ($component == 'green') {\n      $value: $value * 0.7152;\n    } @else {\n      $value: $value * 0.0722;\n    }\n\n    $luminance: $luminance + $value;\n  }\n\n  @return $luminance;\n}\n","// Color Config\n// ============\n// Configure and access your color palette.\n\n\n// Color Map\n// ---------\n/// A variable storing the map of\n/// all colors globally-avialble on your project.\n/// Any colors added to the `$colors` map will be accesible\n/// to the `color()` function by default.\n///\n/// Define each color with a `name`, `base-value`,\n/// and optional `adjustments`…\n///\n/// ```\n/// $colors: (\n///   'color-name': <base-value>,\n///   'color-two': <base-value> ('<color-function>': '<arguments>'),\n///   // will return: function-name($base-value, $arguments...)\n/// );\n/// ```\n///\n/// - Name your colors anything – from abstractions like `brand-pink`,\n///   to concrete patterns like `button` or `widget-background`.\n/// - Base-values can be CSS-ready colors (hex, rgb, hsla),\n///   or references other colors in the map.\n/// - Adjustments are a nested map of color functions and arguments,\n///   for adjusting colors directly in your palette.\n///\n/// The color-names `contrast-light` and `contrast-dark` are special.\n/// Use those names to define the default light-and-dark options\n/// for our color-contrast tools.\n/// They default to `white` and `black` respectively.\n///\n/// @group a-config\n/// @see {function} color\n/// @see {function} contrast\n///\n/// @example scss - simple color definitions\n///   $colors: (\n///     'brand-pink': hsl(330, 85%, 62%),\n///     'brand-light': #fff,\n///     'brand-dark': #222,\n///   );\n/// @example scss - reference other colors\n///   $colors: (\n///     'background': 'brand-light',\n///     'text': 'brand-dark',\n///     'link': 'brand-pink',\n///   );\n/// @example scss - adjust referenced colors with any color function\n///   $colors: (\n///     'focus': 'link' ('darken': 15%, 'desaturate': 15%),\n///   );\n$colors: () !default;\n\n\n// Add Colors\n// ----------\n/// Merge individual color maps into the global `$colors` variable,\n/// in case you want to define colors in smaller groups\n/// such as `brand-colors`, `link-colors`, etc\n/// before merging them into a single global color-palette.\n/// This can be useful for internal organization,\n/// documentation with [SassDoc][SassDoc],\n/// or integration with our pattern-library generator:\n/// [Herman][Herman].\n///\n/// [SassDoc]: http://sassdoc.com/\n/// [Herman]: http://oddbird.net/herman/\n///\n/// @group a-config\n///\n/// @parameter {map...} $maps -\n///   Pass any number of maps to be merged.\n/// @output -\n///   An updated global `$colors` variable,\n///   with new maps merged in.\n///\n/// @example scss\n///   $brand-colors: (\n///     'brand-dark': #222,\n///     'brand-pink': hsl(330, 85%, 62%),\n///   );\n///\n///   $text-colors: (\n///     'text': 'brand-dark',\n///     'link': 'brand-pink',\n///   );\n///\n///   @include add-colors($brand-colors, $text-colors);\n@mixin add-colors (\n  $maps...\n) {\n  $colors: merge-colors($colors, $maps...) !global;\n}\n\n\n\n// Merge Colors\n// ------------\n/// Merge multiple color maps into a single map,\n/// in case you want to define colors in smaller groups –\n/// such as `brand-colors`, `link-colors`, etc. –\n/// before merging them into a single map.\n///\n/// This is like `add-colors`,\n/// but returns the combined map\n/// without assigning it to the `$colors` variable.\n///\n/// @group a-config\n///\n/// @parameter {maps...} $maps -\n///   Pass any number of maps to be merged.\n/// @return {map} -\n///   The merged map of colors.\n/// @example scss\n///   $brand-colors: (\n///     'brand-dark': #222,\n///     'brand-pink': hsl(330, 85%, 62%),\n///   );\n///\n///   $text-colors: (\n///     'text': 'brand-dark',\n///     'link': 'brand-pink',\n///   );\n///\n///   $colors: merge-colors($brand-colors, $text-colors);\n@function merge-colors(\n  $maps...\n) {\n  $return: ();\n\n  @each $map in $maps {\n    $return: map-merge($return, $map);\n  }\n\n  @return $return;\n}\n","// Color API\n// =========\n\n\n// Color\n// -----\n/// The primary function for\n/// accessing colors in your palette,\n/// or making adjustments on the fly.\n///\n/// This is more than a wrapper for `map-get($colors, $x)`.\n/// It also handles internal color-references, recursion,\n/// and functional color-adjustments.\n/// It has access to the global `$colors` map by default,\n/// but you can also pass in arbitrary color-palette maps as well.\n///\n/// @group colors\n///\n/// @parameter {string | list} $color -\n///   The name of a color in your palette,\n///   or a color description in the\n///   [map configuration format](config.html).\n///\n/// @parameter {map} $palette [$colors] -\n///   Optional map containing the source color-palette.\n///   Defaults to the global `$colors` map.\n///\n/// @return {color} -\n///   A calculated css-ready color,\n///   based on your global color palette and adjustments.\n///\n/// @example scss\n///   $colors: (\n///     'background': #eee,\n///     'text': #222,\n///   );\n///\n///   html {\n///     background: color('background');\n///     color: color('text');\n///   }\n@function color(\n  $color,\n  $palette: $colors\n) {\n  // Parse arguments\n  $color: map-get($palette, $color) or $color;\n  $base: nth($color, 1);\n  $adjust: if(length($color) > 1, nth($color, 2), ());\n\n  // Recursive check\n  $color: if(map-has-key($palette, $base), color($base, $palette), $base);\n\n  // Adjustments\n  @each $function, $value in $adjust {\n    $function: _ac-color-get-function($function);\n    $color: call($function, $color, $value...);\n  }\n\n  @return $color;\n}\n","// Scales\n// ======\n\n@import 'utility';\n@import 'pow';\n@import 'config';\n@import 'math';\n@import 'units';\n@import 'size';\n","// Utilities\n// =========\n\n$_LOCAL-FUNCTIONS: (\n  'add', 'plus',\n  'minus', 'subtract',\n  'times', 'multiply',\n  'divide'\n);\n\n\n// Get Function\n// ------------\n/// Get a first-class function in Sass 3.5+,\n/// or the function name string (unchanged)\n/// in older Sass versions.\n/// This is safe to use internally,\n/// as it allows users to pass in\n/// either a string, or a previously-captured function.\n///\n/// @access private\n///\n/// @param {string | function} $function -\n///   The name (string) of a function,\n///   or the function to be called.\n/// @return {string | function} -\n///   Returns a first-class function in Sass 3.5+,\n///   or the function name string in older Sass versions.\n@function _ac-scale-get-function(\n  $function\n) {\n  $type: type-of($function);\n\n  @if ($type == 'function') {\n    @return $function;\n  }\n\n  @if ($type == 'string') and function-exists('get-function') {\n    @if index($_LOCAL-FUNCTIONS, $function) {\n      @return get-function($function);\n    }\n\n    @error '[#{$type}] `#{$function}` must be a first-class function';\n  }\n\n  @return $function;\n}\n\n\n// Format String\n// -------------\n/// Define your own format-string\n/// for building `calc(%s + %s) ('root', 'rhythm')` recipies.\n///\n/// @group config\n/// @type string\n///\n/// @example scss -\n///   $ac-format-string: '@@@';\n$ac-format-string: '%s';\n\n\n// String Replace\n// --------------\n/// Return a string, with a substring replaced\n///\n/// @access private\n///\n/// @param {string} $string -\n///   The original string to be edited\n/// @param {string} $old -\n///   A sub-string to replace\n/// @param {string} $new -\n///   A new sub-string to replace the old\n/// @return {string} -\n///   Original string, with substring replaced\n@function _ac-str-replace(\n  $string,\n  $old,\n  $new: null,\n  $replace-all: false\n) {\n  $return: $string;\n  $i: str-index($string, $old);\n  $n: str-length($old);\n\n  @if $string == $old {\n    $return: $new;\n  } @else if $i {\n    $a: if($i > 1, str-slice($string, 1, $i - 1), '');\n    $z: str-slice($string, $i + $n);\n\n    @if $replace-all {\n      $z: _ac-str-replace($z, $old, $new, true);\n    }\n\n    $return: $a + if($new, $new, '') + $z;\n  }\n\n  @return $return;\n}\n\n\n// Interpolate\n// -----------\n/// Return a string with interpolated values\n/// replacing `%s` format strings\n///\n/// @access private\n///\n/// @param {string} $string -\n///   The original string to be edited\n/// @param {strings} $values... -\n///   New strings, to replace the `%s` format strings\n/// @return {string} -\n///   Original string, with `%s` format strings replaced\n@function _ac-interpolate(\n  $string,\n  $values...\n) {\n  $_return: $string;\n\n  @each $val in $values {\n    @if str-index($_return, $ac-format-string) {\n      $_return: _ac-str-replace($_return, $ac-format-string, $val);\n    } @else {\n      @warn 'Too many values passed for interpolation with \"#{$string}\".';\n    }\n  }\n\n  @return $_return;\n}\n","/// ## MathSass Functions\n///\n/// *We borrowed this set of math constants and functions\n/// from Takeru Suzuki's wonderful [MathSass][MathSass] library.\n/// See the full MIT License below…*\n///\n/// [MathSass]: https://github.com/terkel/mathsass/\n/// @access private\n\n\n// Constants\n// ---------\n$_LN2: 0.6931471805599453; // sass-lint:disable-line variable-name-format\n$_SQRT2: 1.4142135623730951; // sass-lint:disable-line variable-name-format\n\n\n/// Returns base to the exponent power.\n///\n/// @access private\n///\n/// @param {number} $base –\n///   The base number\n/// @param {number} $exp -\n///   The exponent to which to raise base\n/// @return {number}\n/// @example scss\n///   /* #{ _acs-pow(4, 2)   } */\n///   /* #{ _acs-pow(4, -2)  } */\n///   /* #{ _acs-pow(4, 0.2) } */\n@function _acs-pow(\n  $base,\n  $exp\n) {\n  @if $exp == floor($exp) {\n    $r: 1;\n    $s: 0;\n    @if $exp < 0 {\n      $exp: $exp * -1;\n      $s: 1;\n    }\n    @while $exp > 0 {\n      @if $exp % 2 == 1 {\n        $r: $r * $base;\n      }\n      $exp: floor($exp * 0.5);\n      $base: $base * $base;\n    }\n    @return if($s != 0, 1 / $r, $r);\n  } @else if $base == 0 and $exp > 0 {\n    @return 0;\n  } @else {\n    $expint: floor($exp);\n    $r1: _acs-pow($base, $expint);\n    $r2: _exp(_acs-log($base) * ($exp - $expint));\n    @return $r1 * $r2;\n  }\n}\n\n\n/// A good approximation for $x close to 0.\n/// @access private\n@function _exp(\n  $x\n) {\n  $ret: 0;\n  $i: 1;\n  @for $n from 0 to 24 {\n    $ret: $ret + $i;\n    $i: $i * $x / ($n + 1);\n  }\n  @return $ret;\n}\n\n\n/// Returns the natural logarithm of a number.\n///\n/// @access private\n///\n/// @param {number} $x\n/// @param {number} $b the base number\n/// @example scss\n///   /* #{ _acs-log(2)     } */\n///   /* #{ _acs-log(10)    } */\n///   /* #{ _acs-log(2, 10) } */\n@function _acs-log(\n  $x,\n  $b: null\n) {\n  @if $b != null {\n    @return _acs-log($x) / _acs-log($b);\n  }\n\n  @if $x <= 0 {\n    @return 0 / 0;\n  }\n  $k: nth(_acs-frexp($x / $_SQRT2), 2); // sass-lint:disable-line variable-name-format\n  $x: $x / _acs-ldexp(1, $k);\n\n  @return $_LN2 * $k + _acs-log-approx($x); // sass-lint:disable-line variable-name-format\n}\n\n\n/// a good aproximation for $x close to 1\n/// @access private\n@function _acs-log-approx(\n  $x\n) {\n  $x: ($x - 1) / ($x + 1);\n  $x2: $x * $x;\n  $i: 1;\n  $s: $x;\n  $sp: null;\n  @while $sp != $s {\n    $x: $x * $x2;\n    $i: $i + 2;\n    $sp: $s;\n    $s: $s + $x / $i;\n  }\n  @return 2 * $s;\n}\n\n\n/// Returns a two-element list\n/// containing the normalized fraction and exponent of number.\n///\n/// @access private\n///\n/// @param {number} $x\n/// @return {list} fraction, exponent\n@function _acs-frexp(\n  $x\n) {\n  $exp: 0;\n  @if $x < 0 {\n    $x: $x * -1;\n  }\n  @if $x < 0.5 {\n    @while $x < 0.5 {\n      $x: $x * 2;\n      $exp: $exp - 1;\n    }\n  } @else if $x >= 1 {\n    @while $x >= 1 {\n      $x: $x / 2;\n      $exp: $exp + 1;\n    }\n  }\n  @return $x, $exp;\n}\n\n\n// Returns $x * 2^$exp\n///\n/// @access private\n///\n/// @param {number} $x\n/// @param {number} $exp\n@function _acs-ldexp(\n  $x,\n  $exp\n) {\n  $b: if($exp >= 0, 2, 1 / 2);\n  @if $exp < 0 {\n    $exp: $exp * -1;\n  }\n  @while $exp > 0 {\n    @if $exp % 2 == 1 {\n      $x: $x * $b;\n    }\n    $b: $b * $b;\n    $exp: floor($exp * 0.5);\n  }\n  @return $x;\n}\n\n\n/// ## [Copyright (C) 2013 Takeru Suzuki][MathSass]\n///\n/// Permission is hereby granted, free of charge,\n/// to any person obtaining a copy of this software\n/// and associated documentation files (the \"Software\"),\n/// to deal in the Software without restriction,\n/// including without limitation the rights to use,\n/// copy, modify, merge, publish, distribute, sublicense,\n/// and/or sell copies of the Software,\n/// and to permit persons to whom the Software is furnished to do so,\n/// subject to the following conditions:\n///\n/// The above copyright notice and this permission notice\n/// shall be included in all copies or substantial portions of the Software.\n///\n/// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n/// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO\n/// THE WARRANTIES OF MERCHANTABILITY,\n/// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n/// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n/// BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n/// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n/// OUT OF OR IN CONNECTION WITH THE SOFTWARE\n/// OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n///\n/// [MathSass]: https://github.com/terkel/mathsass/\n/// @access private\n","// Scale Settings\n// --------------\n\n\n// Browser Default Font Size\n// -------------------------\n/// The default font-size used by most browsers.\n/// @access private\n$_BROWSER-DEFAULT-FONT-SIZE: 16px;\n\n\n// Default Ratios\n// --------------\n/// Common pre-defined ratios that you can access by name.\n/// Numeric ratios (like the musical scale) are exponential -\n/// while a 'linear' scale uses simple multipliers.\n/// This variable should not be edited.\n/// Use the `$ratios` variable to add your own ratios,\n/// or aliases for built-in ratios.\n///\n/// Don't make changes to this map directly.\n/// You can add your own named ratios in the `$ratios` map.\n///\n/// @group config\n/// @access public\n/// @see $ratios\n///\n/// @type map\n$_DEFAULT-RATIOS: (\n  'octave': 2,\n  'major-seventh': 15 / 8,\n  'minor-seventh': 16 / 9,\n  'major-sixth': 5 / 3,\n  'minor-sixth': 8 / 5,\n  'fifth': 3 / 2,\n  'augmented-fourth': 45 / 32,\n  'fourth': 4 / 3,\n  'major-third': 5 / 4,\n  'minor-third': 6 / 5,\n  'major-second': 9 / 8,\n  'minor-second': 16 / 15,\n  'multiple': 'linear',\n);\n\n\n// Ratios\n// ------\n/// Define your own ratios,\n/// or alias keys for built-in ratios.\n/// Any ratios that resolve to `linear`\n/// will not use any exponential scale.\n///\n/// @group config\n/// @type map\n/// @see $_DEFAULT-RATIOS\n///\n/// @example scss -\n///   $ratios: (\n///     'line-height': 1 / 3,\n///     'headings': 'linear',\n///     'golden': 1.61803399,\n///   );\n$ratios: () !default;\n\n\n// Sizes\n// -----\n/// Defined a palette of common sizes to be used across your project,\n/// in the format \"name: size\" or \"name: basis (ratio/function: value)\".\n/// If your map includes a `px`-comparable value for `root`,\n/// it will be used in relative-size unit conversions.\n///\n/// @group config\n/// @type map\n///\n/// @property 'root' [16px] -\n///   Include a root font-size for your document,\n///   used for calculating relative sizes.\n///   This should match the size applied to your html element.\n$sizes: (\n  'root': $_BROWSER-DEFAULT-FONT-SIZE,\n  'text': 'root' ('convert-units': 'rem'),\n  'rhythm': 'text' ('fifth': 1),\n\n  'h1': 'text' ('linear': 4),\n  'h2': 'text' ('linear': 3),\n  'h3': 'text' ('linear': 2),\n) !default;\n","// Math Helpers\n// ============\n\n\n// Plus\n// ----\n/// Add two values together in a `$sizes` map.\n///\n/// @group math\n///\n/// @param {string | length} $size1 -\n///   The name or length of the size you are adding to\n/// @param {string | length} $size2 -\n///   The name or length of the size being added\n/// @return {number} -\n///   The calculated results of adding\n///   `$size1` and `$size2`\n/// @example scss -\n///   $sizes: (\n///     'text': 16px,\n///     'margin': 14px,\n///     'spacer': 'text' ('plus': 'margin'),\n///   );\n@function plus(\n  $size1,\n  $size2\n) {\n  @return size($size1) + size($size2);\n}\n\n\n// Add\n// ---\n/// @alias plus\n/// @group math\n@function add(\n  $size1,\n  $size2\n) {\n  @return plus($size1, $size2);\n}\n\n\n\n// Minus\n// -----\n/// Subtract one value from another in a `$sizes` map.\n///\n/// @group math\n///\n/// @param {string | length} $size1 -\n///   The name or length of the size you are subtracting from\n/// @param {string | length} $size2 -\n///   The name or length of the size to subtract\n/// @return {number} -\n///   The calculated results of subtracting\n///   `$size2` from `$size1`\n/// @example scss -\n///   $sizes: (\n///     'text': 16px,\n///     'margin': 14px,\n///     'shim': 'text' ('minus': 'margin'),\n///   );\n@function minus(\n  $size1,\n  $size2\n) {\n  @return size($size1) - size($size2);\n}\n\n\n// Subtract\n// --------\n/// @alias minus\n/// @group math\n@function subtract(\n  $size1,\n  $size2\n) {\n  @return minus($size1, $size2);\n}\n\n\n// Times\n// -----\n/// Multiplty two values in a `$sizes` map.\n///\n/// @group math\n///\n/// @param {string | length} $size1 -\n///   The name or length of the size you are multiplying\n/// @param {string | length} $size2 -\n///   The name or length of the size to use as a multiple\n/// @return {number} -\n///   The calculated results of multiplying\n///   `$size1` by `$size2`\n/// @example scss -\n///   $sizes: (\n///     'text': 16px,\n///     'double': 'text' ('times': 2),\n///   );\n@function times(\n  $size1,\n  $size2\n) {\n  @return size($size1) * size($size2);\n}\n\n\n// Multiply\n// --------\n/// @alias times\n/// @group math\n@function multiply(\n  $size1,\n  $size2\n) {\n  @return times($size1, $size2);\n}\n\n\n// Divide\n// ------\n/// Divide two values in a `$sizes` map.\n///\n/// @group math\n///\n/// @param {string | length} $size1 -\n///   The name or length of the size you are dividing\n/// @param {string | length} $size2 -\n///   The name or length of the size to use as a division\n/// @return {number} -\n///   The calculated results of dividing\n///   `$size1` by `$size2`\n/// @example scss -\n///   $sizes: (\n///     'text': 16px,\n///     'half': 'text' ('divide': 2),\n///   );\n@function divide(\n  $size1,\n  $size2\n) {\n  @return size($size1) / size($size2);\n}\n","// Unit Helpers\n// ------------\n\n\n// Get PX [function]\n// -----------------\n/// If a value can be converted to px by Sass, do it.\n///\n/// @access private\n///\n/// @param {number} $length -\n///   The number to be converted to px if comparable.\n/// @return {number | false} -\n///   Either the `px` value of the converted `$length` or `false`.\n@function _get-px(\n  $length\n) {\n  @return if(comparable($length, 1px), 0px + $length, false);\n}\n\n\n// Get Number [function]\n// ---------------------\n/// Get a `0`-value for any absolute unit.\n///\n/// @access private\n///\n/// @param {string} $unit -\n///   The unit to return as a number.\n/// @return {number | false} -\n///   Either the `0` value of a unit or `false`.\n@function _get-number(\n  $unit,\n  $relative: false\n) {\n  $_absolute: (\n    'in': 0in,\n    'mm': 0mm,\n    'cm': 0cm,\n    'pt': 0pt,\n    'pc': 0pc,\n    'px': 0px,\n  );\n\n  $_relative: (\n    'em': 0em,\n    'rem': 0rem,\n    '%': 0%,\n    'ex': 0ex,\n    'ch': 0ch,\n    'vw': 0vw,\n    'vh': 0vh,\n    'vmin': 0vmin,\n    'vmax': 0vmax,\n    'fr': 0fr,\n  );\n\n  @if $relative {\n    @return map-get($_absolute, $unit) or map-get($_relative, $unit);\n  }\n\n  @return map-get($_absolute, $unit);\n}\n\n\n// Convert Units [function]\n// ------------------------\n/// Convert lengths between comparable units.\n/// You can also convert to `browser-ems`,\n/// relative to the browser default rather than the site root –\n/// useful for media-quesries.\n///\n/// @group units\n///\n/// @param {length | string} $length -\n///   The length or named size to be converted.\n/// @param {string} $to-unit -\n///   The desired units to convert to.\n///   Some units (`ch`, `vw`, `vh`, `vmin`, `vmax`) cannot be converted.\n/// @param {length | string} $from-context ['root' setting or 16px] -\n///   When converting from relative units,\n///   the absolute length (in px) to which $length refers -\n///   e.g. for `$lengths` in em units, would normally be the\n///   font-size of the current element.\n/// @param {length | string} $to-context [$from-context] -\n///   For converting *to* relative units,\n///   the absolute length in px to which the output value will refer.\n///   Defaults to the same as `$from-context`, since it is rarely needed.\n@function convert-units(\n  $length,\n  $to-unit,\n  $from-context: map-get($sizes, 'root') or $_BROWSER-DEFAULT-FONT-SIZE,\n  $to-context: $from-context\n) {\n  $_convertable: ('in', 'mm', 'cm', 'pt', 'pc', 'px', 'em', 'rem', '%', 'ex');\n\n  $length: _ac-scale-get-size($length);\n  $from-context: _ac-scale-get-size($from-context);\n  $to-context: _ac-scale-get-size($to-context);\n\n  $from-unit: unit($length);\n\n  // Special conversion for browser-default ems (needed in media-queries)\n  @if ($to-unit == 'browser-ems') {\n    $size: convert-units($length, 'px', $from-context);\n    @return $size / $_BROWSER-DEFAULT-FONT-SIZE * 1em;\n  }\n\n  // No conversion needed\n  @if ($from-unit == $to-unit) {\n    @return $length;\n  }\n\n  @if ($from-unit == '') {\n    @return _get-number($to-unit, 'allow-relative') + $length;\n  } @else if ($to-unit == '') {\n    @return $length / ($length * 0 + 1);\n  }\n\n  // Warn and escape when units are not convertable\n  @each $units in ($from-unit, $to-unit) {\n    @if not index($_convertable, $units) {\n      @warn '`#{$units}` units can not be reliably converted; Returning original value.';\n      @return $length;\n    }\n  }\n\n  // Optomize comparable (non-relative) units\n  $absolute-output: _get-number($to-unit);\n\n  @if $absolute-output and comparable($length, $absolute-output)  {\n    @return $absolute-output + $length;\n  }\n\n  // Establish relative context\n  $root-size: map-get($sizes, 'root') or $_BROWSER-DEFAULT-FONT-SIZE;\n  $root-size: _ac-scale-get-size($root-size);\n  $root-size: _get-px($root-size);\n  $from-context: _get-px($from-context);\n  $to-context: _get-px($to-context);\n\n  // Context values must be in px\n  @if (not $from-context) or (not $to-context) {\n    @error 'Context paremeters must resolve to a value in pixel units.';\n  }\n\n  // Convert relative length to pixels\n  $px-length: _get-px($length) or $length;\n  $from-unit: unit($px-length);\n\n  // Convert relative units using the from-context parameter.\n  @if $from-unit == 'em' {\n    $px-length: $length * $from-context / 1em;\n  } @else if $from-unit == 'rem' {\n    $px-length: $length * $root-size / 1rem;\n  } @else if $from-unit == '%' {\n    $px-length: $length * $from-context / 100%;\n  } @else if $from-unit == 'ex'  {\n    $px-length: $length * $from-context / 2ex;\n  }\n\n  // Convert length in pixels to the output unit\n  @if $absolute-output {\n    @return $absolute-output + $px-length;\n  } @else if $to-unit == 'em' {\n    @return $px-length * 1em / $to-context;\n  } @else if $to-unit == 'rem' {\n    @return $px-length * 1rem / $root-size;\n  } @else if $to-unit == '%' {\n    @return $px-length * 100% / $to-context;\n  } @else if $to-unit == 'ex' {\n    @return $px-length * 2ex / $to-context;\n  }\n\n  @error 'Failed to convert #{$length} into #{$to-units}.';\n}\n","// Base API\n// ========\n\n\n// Size [function]\n// ---------------\n/// Access a named size in your `$sizes` map,\n/// using any comparable units.\n///\n/// @group sizes\n///\n/// @param {string | length | list} $size -\n///   The name of a size in your configuration (e.g. `line-height`),\n///   or a length to be converted into different units (e.g. `24px`),\n///   or a base-size and adjustments to be made\n///   (e.g. `24px ('minor-third': 2)`),\n///   or a `calc(%s + %s) ('root', 'rhythm')` recipie\n///   for building `calc` values.\n///   For the sake of consistent documentation,\n///   I recommend keeping adjustments in the configuration\n///   whenever possible.\n/// @param {vararg} $unit... -\n///   The desired unit for the output (e.g. `px` or `rem`),\n///   and any other arguments required for the conversion.\n/// @return {length} -\n///   The calculated length, in the requested units.\n@function size(\n  $size,\n  $unit...\n) {\n  $size: _ac-scale-get-size($size);\n  $size: if(length($unit) > 0, convert-units($size, $unit...), $size);\n\n  @return $size;\n}\n\n\n// Negative [function]\n// -------------------\n/// Return the negative value of any length,\n/// in comparable units.\n///\n/// @group sizes\n///\n/// @param {string | length | list} $size -\n///   The name of a size in your configuration (e.g. `line-height`),\n///   or a length to be converted into different units (e.g. `24px`),\n///   or a base-size and adjustments to be made\n///   (e.g. `24px ('minor-third': 2)`).\n///   For the sake of consistent documentation,\n///   I recommend keeping adjustments in the configuration\n///   whenever possible.\n/// @param {vararg} $unit... -\n///   The desired unit for the output (e.g. `px` or `rem`),\n///   and any other arguments required for the conversion.\n/// @return {length} -\n///   The calculated negative length, in the requested units.\n@function negative(\n  $size,\n  $unit...\n) {\n  @return 0 - size($size, $unit...);\n}\n\n\n// Scale [function]\n// ----------------\n/// Retrieve a scale ratio by name\n/// from either the `$_DEFAULT-RATIOS`\n/// or user `$ratios` configurations.\n///\n/// @group sizes\n///\n/// @param {string | number} $ratio -\n///   The key-name or value of a ratio\n/// @return {number} -\n///   The numeric value of a ratio\n/// @example scss\n///   /* Octave: #{ratio('octave')} */\n///   /* Fifth: #{ratio('fifth')} */\n@function ratio(\n  $ratio\n) {\n  $_ratio-options: map-merge($_DEFAULT-RATIOS, $ratios);\n  $_new-ratio: map-get($_ratio-options, $ratio) or $ratio;\n\n  @if ($ratio != $_new-ratio) and map-has-key($_ratio-options, $_new-ratio) {\n    $_new-ratio: ratio($_new-ratio);\n  }\n\n  @return $_new-ratio;\n}\n\n\n// Square [mixin]\n// --------------\n/// Create a square by setting equal CSS `height` and `width` properties\n/// with the given size & unit value.\n///\n/// @group sizes\n///\n/// @param {string | length | list} $size -\n///   The name of a size in your configuration (e.g. `line-height`),\n///   or a length to be converted into different units (e.g. `24px`),\n///   or a base-size and adjustments to be made\n///   (e.g. `24px ('minor-third': 2)`).\n///   For the sake of consistent documentation,\n///   I recommend keeping adjustments in the configuration\n///   whenever possible.\n/// @param {vararg} $unit... -\n///   The desired unit for the output (e.g. `px` or `rem`),\n///   and any other arguments required for the conversion.\n/// @output -\n///   Equal CSS height and width properties,\n///   set to the given size and units.\n@mixin square(\n  $size,\n  $unit...\n) {\n  $size: size($size, $unit...);\n\n  height: $size;\n  width: $size;\n}\n\n\n\n// Get Size\n// --------\n/// Access a named size in your `$sizes` map.\n///\n/// @access private\n///\n/// @param {string | length | list} $size -\n///   The name of a size in your configuration (e.g. `line-height`),\n///   or a length to be converted into different units (e.g. `24px`),\n///   or a base-size and adjustments to be made\n///   (e.g. `24px ('minor-third': 2)`),\n///   or a `calc(%s + %s) ('root', 'rhythm')` recipie\n///   for building `calc` values.\n///   For the sake of consistent documentation,\n///   I recommend keeping adjustments in the configuration\n///   whenever possible.\n/// @throw -\n///   The calculated value is not a valid CSS length.\n/// @return {length} -\n///   The calculated length\n@function _ac-scale-get-size(\n  $size\n) {\n  // Parse arguments\n  $size: map-get($sizes, $size) or $size;\n  $base: nth($size, 1);\n  $adjust: if(length($size) > 1, nth($size, 2), null);\n\n  // Recursive check\n  $size: if(map-has-key($sizes, $base), _ac-scale-get-size($base), $base);\n\n  // Adjustments\n  $adjust-type: type-of($adjust);\n  $calc: (type-of($size) == 'string') and (str-slice($size, 1, 5) == 'calc(');\n\n  @if (not $calc) and ($adjust-type == 'map') {\n    @each $key, $value in $adjust {\n      $size: _ac-scale-adjust-size($size, $key, $value...);\n    }\n  } @else if $calc and ($adjust-type == 'list') {\n    $values: ();\n\n    @each $value in $adjust {\n      $values: append($values, _ac-scale-get-size($value));\n    }\n\n    $size: _ac-interpolate($base, $values...);\n  }\n\n\n  // Validation\n  @if (type-of($size) == 'number') or $calc {\n    @return $size;\n  }\n\n  @error '#{$size} is not a valid length for CSS.';\n}\n\n\n\n// Adjust Size\n// -----------\n/// Calculate ratio, linear, or arbitrary adjustments\n/// to a base size.\n///\n/// @access private\n///\n/// @param {number} $size -\n///   The original size to perform adjusments on\n/// @param {string | number} $key -\n///   The adjustment to perform,\n///   given as either a numeric ratio,\n///   named ratio keyword,\n///   or function name to call.\n/// @param {arglist} $value… -\n///   Any required arguments,\n///   such as the number of times to apply a ratio,\n///   or additional information to be passed to a function.\n/// @return {number} -\n///   Results of the adjustment.\n@function _ac-scale-adjust-size(\n  $size,\n  $key,\n  $value...\n) {\n  $ratio: ratio($key);\n  $value: if(length($value) == 1, nth($value, 1), $value);\n\n  @if $ratio == 'linear' {\n    @return $size * $value;\n  } @else if (type-of($ratio) == 'number') {\n    $multiplier: _acs-pow($ratio, $value);\n    @return $size * $multiplier;\n  } @else if (type-of($key) == 'function') or function-exists($key) {\n    $function: _ac-scale-get-function($key);\n    $args: if($value, join($size, $value), $size);\n    @return call($function, $args...);\n  }\n\n  @error '#{$key} is not a valid ratio or function for adusting sizes.';\n}\n\n\n","// Fonts manifest\n// ==============\n\n\n@import 'config';\n@import 'helpers';\n@import 'a11y';\n@import 'fonts';\n@import 'pseudo-elements';\n","// Font Configuration\n// ==================\n\n\n// Font Formats\n// ------------\n/// The file formats to include when importing a font-face.\n/// @group config\n/// @type List\n$font-formats: 'woff' 'ttf' !default;\n\n\n// Font Path\n// ---------\n/// The path to your fonts directory,\n/// often relative to your output CSS.\n/// @group config\n/// @type String\n$font-path: '../fonts/' !default;\n\n\n// Fonts\n// -----\n/// A map for managing all your fonts on a project.\n/// Give each font a semantic access-key and fallback stack,\n/// and provide import url's for local font files as-needed.\n///\n/// Safely provide any extra data you need access to,\n/// since accoutrement-type will ignore unknown font properties.\n/// For example,\n/// we often include a `source` property in our font maps,\n/// providing a link to the font foundry, license, or CDN.\n/// If you are using [Herman][http://oddbird.net/herman/]\n/// to generate style-guides and font previews,\n/// it will include `source` links in the output.\n///\n/// @group config\n/// @type Map\n/// @prop {map} <key> -\n///   Give each font a key for access in the code,\n///   with a nested map defining the font details.\n/// @prop {string} <key>.name [<key>] -\n///   The actual name of the font-face,\n///   if it's different from the given <key>.\n/// @prop {list} <key>.stack -\n///   A list of fallback fonts\n///   for browsers that can't load the given webfont.\n/// @prop {string} <key>.<variant> -\n///   Add keys for each font-variant\n///   (normal, bold, italic, bold italic, etc):\n///   - local path values will have `$font-path` prepended,\n///     and `$font-formats` appended for loading.\n/// @example scss -\n///   $fonts: (\n///     'sans': (\n///       'name': 'FranklinGothic',\n///       'stack': ('Helvetica', 'Arial', 'sans-serif'),\n///       'regular': 'franklingothic-regular-filename',\n///       'bold': 'franklingothic-bold-filename',\n///       'bold' 'italic': 'franklingothic-bolditalic-filename',\n///       // safely document any additional font data you want…\n///       'source': 'https://www.fontspring.com/fonts/exljbris/museo-sans'\n///     ),\n///   );\n$fonts: () !default;\n\n\n\n// Add Font\n// --------\n/// Merge individual font maps into the global `$fonts` variable.\n/// This can be useful for internal organization,\n/// documentation with [SassDoc][SassDoc],\n/// or integration with our pattern-library generator:\n/// [Herman][Herman].\n///\n/// [SassDoc]: http://sassdoc.com/\n/// [Herman]: http://oddbird.net/herman/\n///\n/// @group config\n///\n/// @parameter {map} $key -\n///   Give your font a semantic name\n///   for easy access across your project.\n/// @parameter {map} $map -\n///   Pass any number of maps to be merged.\n/// @output -\n///   An updated global `$fonts` variable,\n///   with new maps merged in.\n///\n/// @example scss\n///   $franklin: (\n///     'name': 'FranklinGothic',\n///     'stack': ('Helvetica', 'Arial', 'sans-serif'),\n///   );\n///\n///   @include add-font('heading', $franklin);\n@mixin add-font (\n  $key,\n  $map,\n  $force: false\n) {\n  @if map-get($fonts, $key) and not $force {\n    @error 'Font key `#{$key}` already exists. Rename or $force to continue';\n  }\n\n  $new: ($key: $map);\n  $fonts: map-merge($fonts, $new) !global;\n}\n","// Internal Font Helpers\n// =====================\n\n$_font-style-options: 'italic' 'oblique';\n$_font-weight-options: 100 200 300 400 500 600 700 800 900 'bold';\n$_font-format-options: (\n  'ttf': 'truetype',\n  'otf': 'opentype',\n  'woff': 'woff',\n  'woff2': 'woff2',\n  'svg': 'svg',\n  'svgz': 'svg',\n  'eot': 'embedded-opentype',\n);\n\n\n// Font Get\n// --------\n/// Get a font from the `$fonts` map.\n/// @access private\n@function _font-get(\n  $key\n) {\n  $font: map-get($fonts, $key);\n\n  @if not $font {\n    @error '#{$key} is not defined in your `$fonts` configuration map.';\n  } @else if map-has-key($fonts, $font) {\n    $font: _font-get($font);\n  }\n\n  @return $font;\n}\n\n\n// Font Src\n// --------\n/// Get the font `src` value for a given font path and format.\n/// @access private\n@function _font-src(\n  $path,\n  $format,\n  $suffix: ''\n) {\n  $url: $path + '.' + $format + $suffix;\n  $format: map-get($_font-format-options, $format);\n\n  @return font-url($url) format($format);\n}\n\n\n// Parse Font Variant\n// -------------------\n/// Parse a list of font variants into a map of styles and weights.\n/// @access private\n/// @param {List} $variant -\n///   A list of font variants, such as `('bold', 'italic')`.\n/// @return {$map} -\n///   A map of `style` and `weight` values.\n@function _parse-font-variant(\n  $variant\n) {\n  $return: (\n    'style': 'normal',\n    'weight': 'normal',\n  );\n\n  @each $item in $variant {\n    @if index($_font-style-options, $item) {\n      $return: map-merge($return, ('style': $item));\n    } @else if index($_font-weight-options, $item) {\n      $return: map-merge($return, ('weight': $item));\n    }\n  }\n\n  @return $return;\n}\n\n\n// Import Font-Face [mixin]\n// ------------------------\n/// A wrapper utility for the CSS `@font-face` block.\n/// @access private\n/// @param {String} $name -\n///   The font name.\n/// @param {String} $path -\n///   Path to the font files (leaving off the file format indicator).\n/// @param {String | List} $variant [('normal', 'normal')] -\n///   The font-style and font-weight properties.\n/// @param {List} $formats -\n///   The font formats (e.g. 'ttf', 'otf', 'woff') to import.\n///   Font files will be imported in the order given.\n@mixin _import-font-face(\n  $name,\n  $path,\n  $variant: ('normal', 'normal'),\n  $formats: $font-formats\n) {\n  $variant: _parse-font-variant($variant);\n  $src: ();\n\n  @each $format in $formats {\n    $suffix: '';\n\n    @if ($format == 'eot') {\n      $suffix: '?#iefix';\n    } @else if index(('svg', 'svgz'), $format) {\n      $suffix: '#' + $name;\n    }\n\n    $item: _font-src($path, $format, $suffix);\n    $src: append($src, $item, 'comma');\n  }\n\n  @font-face {\n    font-family: quote($name);\n    font-style: unquote(map-get($variant, 'style'));\n    font-weight: unquote(map-get($variant, 'weight'));\n\n    @if index($formats, 'eot') {\n      // IE9 compat mode (eot)\n      src: _font-src($path, 'eot');\n    }\n\n    // IE6-IE8 (eot) - with '?#iefix'\n    // Modern Browsers (woff, woff2)\n    // Safari, Android, iOS (ttf, otf)\n    // Legacy iOS (svg, svgz) - with '#svgName'\n    src: $src;\n  }\n}\n","// Hidden\n// ======\n\n\n// Is Hidden -- Position\n// ---------------------\n/// Hide an element by positioning it off the page.\n/// @group a11y\n/// @access private\n@mixin _is-hidden--position {\n  left: -9999px;\n  pointer-events: none;\n  position: absolute;\n  top: -9999px;\n}\n\n\n// Is Hidden -- Clip\n// -----------------\n/// Hide an element by clipping it in place.\n/// @group a11y\n/// @access private\n@mixin _is-hidden--clip {\n  clip: rect(1px, 1px, 1px, 1px);\n  clip-path: inset(1px 1px 1px 1px);\n  height: 1px;\n  overflow: hidden;\n  pointer-events: none;\n  position: absolute;\n  width: 1px;\n}\n\n\n// Is Hidden\n// ---------\n/// Hide an element using either the `clip` or `position` method.\n/// @group a11y\n/// @param {'clip' | 'position'} $method ['clip'] -\n///   The hiding method to use.\n@mixin is-hidden(\n  $method: 'clip'\n) {\n  @if $method == 'position' {\n    @include _is-hidden--position;\n  } @else {\n    @include _is-hidden--clip;\n  }\n}\n","// Fonts API\n// =========\n\n\n// Font-URL [function]\n// -------------------\n/// Get a CSS-ready URL function (`url('my/path')`) with\n/// the full path to a file in the fonts directory.\n/// @group fonts\n/// @param {string} $path -\n///   A path relative to the fonts directory.\n/// @return {String} -\n///   The full path to a font file, in CSS `url('my/path')` format.\n@function font-url(\n  $path\n) {\n  $full-path: quote($font-path + $path);\n  @return url($full-path);\n}\n\n\n// Font Family [function]\n// ----------------------\n/// Access a font-family from your `$fonts` map.\n/// @group fonts\n/// @param {string} $key -\n///   The key-name of a font in your `$fonts` map.\n/// @return {String} -\n///   The full font-stack for the given font,\n///   ready for output with the `font-family` property.\n@function font-family(\n  $key\n) {\n  $font: map-get($fonts, $key);\n  $name: map-get($font, 'name') or $key;\n  @return join($name, map-get($font, 'stack'), 'comma');\n}\n\n\n// Font Family [mixin]\n// -------------------\n/// Output a font-stack to font-family based on your `$fonts` configuration.\n/// @group fonts\n/// @param {string} $key -\n///   The key-name of a font in your `$fonts` map.\n@mixin font-family(\n  $key\n) {\n  font-family: font-family($key);\n}\n\n\n// Font Face [mixin]\n// -----------------\n/// Import any local webfont defined in your `$fonts` configuration\n/// (variants without a path will not be imported).\n/// @group fonts\n/// @param {string} $key -\n///   The key-name of a font in your `$fonts` map.\n/// @param {list} $formats [$font-formats] -\n///   The font file formats (e.g. 'ttf', 'otf', 'woff') to import.\n///   Font files will be imported in the order given.\n@mixin font-face(\n  $key,\n  $formats: $font-formats\n) {\n  $var-options: join($_font-style-options, $_font-weight-options);\n  $var-options: join($var-options, ('normal', 'regular'));\n  $font: _font-get($key);\n  $name: $key;\n  $variants: ();\n\n  @each $key, $value in $font {\n    $first: nth($key, 1);\n\n    @if ($first == 'name') {\n      $name: $value;\n    } @else if index($var-options, $first) {\n      $variants: map-merge($variants, ($key: $value));\n    }\n  }\n\n  @if (length($variants) > 0) {\n    @each $variant, $path in $variants {\n      $variant: if(($variant == 'regular'), 'normal', $variant);\n\n      @if $path {\n        @include _import-font-face($name, $path, $variant, $formats);\n      }\n    }\n  }\n}\n\n\n// Import WebFonts [mixin]\n// -----------------------\n/// Import webfonts from your font config list.\n/// @group fonts\n/// @param {map} $fonts [$fonts] -\n///   A map of your font configuration.\n/// @param {list} $formats [$font-formats] -\n///   The font file formats (e.g. 'ttf', 'otf', 'woff') to import.\n///   Font files will be imported in the order given.\n@mixin import-webfonts(\n  $fonts: $fonts,\n  $formats: $font-formats\n) {\n  @each $key, $value in $fonts {\n    @if type-of($value) == 'map' {\n      @include font-face($key, $font-formats);\n    }\n  }\n}\n","// Pseudo Elements\n// ===============\n\n\n// Before\n// ------\n/// Add generated content `:before` an element.\n/// @group pseudo\n/// @param {String} $content -\n///   A value for the `content` property.\n@mixin before(\n  $content\n) {\n  &::before {\n    content: $content;\n    @content;\n  }\n}\n\n\n// After\n// -----\n/// Add generated content `:after` an element.\n/// @group pseudo\n/// @param {String} $content -\n///   A value for the `content` property.\n@mixin after(\n  $content\n) {\n  &::after {\n    content: $content;\n    @content;\n  }\n}\n\n\n// Wrap Content\n// ------------\n/// Add generated content `:before` and `:after` an element.\n/// @group pseudo\n/// @param {List} $content -\n///   One or two values to be used for the `content` property.\n///   A single string will be used `:before` and `:after`.\n@mixin wrap-content(\n  $content: '“' '”'\n) {\n  $_before: nth($content, 1);\n\n  &::before,\n  &::after {\n    content: $_before;\n    @content;\n  }\n\n  @if length($content) > 1 {\n    &::after { content: nth($content, 2); }\n  }\n}\n","// Herman Utilities\n// ================\n\n\n// Plural Types\n// ------------\n// A map of data-types used in herman,\n// for correcting singular input\n// so data is consistently stored with a plural access key.\n//\n// No need to display these in the docs…\n//\n// @access private\n// @group api_sass-utilities\n// @type map\n// @see herman-add\n$_herman-plural-types: (\n  'color': 'colors',\n  'size': 'sizes',\n  'ratio': 'ratios',\n  'font': 'fonts',\n);\n\n\n// Accoutrement Functions Per Type\n// -------------------------------\n// The accoutrement function to use\n// when compiling a map for Herman export.\n//\n// No need to display these in the docs…\n//\n// @access private\n// @group api_sass-utilities\n// @type map\n// @see accoutrement-add\n$_herman-accoutrement-per-type: (\n  'colors': 'color',\n  'sizes': 'size',\n  'ratios': 'ratio'\n);\n\n\n// Herman\n// ------\n/// A map of values to be exported to JSON.\n///\n/// The `$herman` map should be structured\n/// with top-level keys representing individual sassdoc items.\n/// Top-level values will often be a nested map\n/// of the data to preview.\n/// Use the `herman-add` or `accoutrement-add` mixins\n/// to automatically populate\n/// fonts, colors, sizes, and ratios from existing maps –\n/// or construct your `$herman` map by hand,\n/// following these guidelines…\n///\n/// ### Map structure:\n///\n/// Each type of preview value should be nested inside\n/// a map that describes what type of data is being stored:\n///\n/// ```\n/// $herman: (\n///   'colors': (\n///     /* color maps */\n///   );\n///   'sizes': (\n///     /* color maps */\n///   );\n///   'ratios': (\n///     /* color maps */\n///   );\n///   'fonts': (\n///     /* color maps */\n///   );\n/// );\n///\n/// ### Colors:\n///\n/// Each color has an access name and value.\n/// For us, that is often a map-key string,\n/// and Sass hex/rgba output color:\n///\n/// ```\n/// 'brand-colors': (\n///   'brand-orange': '#c75000',\n///   'brand-blue': '#0d7fa5',\n/// )\n/// ```\n///\n/// If you are storing colors in variables,\n/// you may want to use name keys like `$brand-orange`\n/// to represent the proper use of a color.\n///\n/// Color values can be in any valid web-color format –\n/// hex, hsl/a, rgba/a, etc –\n/// converted to a valid JSON string.\n///\n/// ### Sizes & Ratios\n///\n/// Size and ratio data is similar to colors,\n/// organized into top-level groups that may contain\n/// one or more size/ratio key:value pairs:\n///\n/// ```\n/// 'font-ratios': (\n///   'line-height': '1.4',\n///   'minor-seventh': '16/9',\n/// ),\n/// 'text-sizes': (\n///   'root': '18px',\n///   'large': 'calc(1rem + 1.5vw)',\n/// )\n/// ```\n///\n/// Ratio values can be in any valid number,\n/// and size values should be valid CSS lengths –\n/// both converted to a valid JSON string.\n///\n/// ### Fonts:\n///\n/// Each font should have a top-level key of it's own,\n/// since font-previews display a single font at a time.\n/// The data map accepts:\n///\n/// - `name`: how the font should be referenced in CSS\n/// - `stack`: optional list of font-stack fallbacks\n/// - `source`: link to more information on the font,\n///    or typekit/googlefonts as useful\n/// - `<variant>`: describe any number of relative paths to locally-hosted\n///   font-files per variant: e.g. `regular`, `bold italic`, etc.\n///\n/// ```\n/// 'body-font': (\n///   'name': 'Source Sans Pro',\n///   'source': 'https://github.com/adobe-fonts/source-sans-pro'\n///   'stack': ('Helvetica Neue', 'Helvetica', 'Arial', 'sans-serif'),\n///   'regular': 'sans/sourcesanspro-regular-webfont',\n///   'italic': 'sans/sourcesanspro-italic-webfont',\n/// )\n/// ```\n///\n/// @group api_sass-utilities\n///\n/// @example scss - sample map structure\n///   $herman: (\n///     'colors': (\n///       'brand-colors': (\n///         'brand-orange': '#c75000',\n///         'brand-blue': '#0d7fa5',\n///       ),\n///       'status-colors': (\n///         'go': '#657e1b',\n///         'yield': '#c75000',\n///       ),\n///     ),\n///     'fonts': (\n///       'body-font': (\n///         'name': 'Source Sans Pro',\n///         'stack': ('Helvetica Neue', 'Helvetica', 'Arial', 'sans-serif'),\n///         'regular': 'sans/sourcesanspro-regular-webfont',\n///         'italic': 'sans/sourcesanspro-italic-webfont',\n///       ),\n///     ),\n///     'sizes': (\n///       'text-sizes': (\n///         'root': '18px',\n///         'large': 'calc(1rem + 1.5vw)',\n///       ),\n///     ),\n///   );\n$herman: () !default;\n\n\n// Herman Add\n// ----------\n/// Add a map of colors, fonts, sizes, ratios, etc\n/// to the `$herman` map for JSON-export,\n/// converting values to JSON-ready strings,\n/// with optional functions/args for compiling raw values.\n/// @group api_sass-utilities\n/// @param {String} $type -\n///   The type of map being added,\n///   e.g. `colors`, `fonts`,\n///   `sizes`, or `ratios`.\n/// @param {String} $key -\n///   A key name for accessing this data in JSON —\n///   should match the variable name,\n///   unless `key` is otherwise set in the `@preview` annotation\n/// @param {Map} $map -\n///   A map of name/value pairs\n/// @param {Arglist} $args… -\n///   A function to use for compiling values before export,\n///   and any additional arguments for the function\n/// @output\n///   Updated `$herman` map, ready for JSON export\n/// @example scss\n///   $brand-colors: (\n///     'brand-blue': hsl(195, 85%, 35%),\n///     'light-gray': 'brand-blue' ('tint': 80%, 'desaturate': 80%),\n///   );\n///   @include herman-add('colors', 'brand-colors', $brand-colors, 'color');\n///   /* #{$herman} */\n@mixin herman-add(\n  $type,\n  $key,\n  $map,\n  $args...\n) {\n  // pluralize type\n  $type: map-get($_herman-plural-types, $type) or $type;\n\n  // compile maps as needed\n  @if (length($args) > 0) {\n    $map: herman-map-compile($map, $args...);\n  }\n\n  // Update nested map by type\n  $nested: map-get($herman, $type) or ();\n  $nested: map-merge($nested, ($key: $map));\n  $nested: ($type: $nested);\n\n  // Merge nested map back into $herman\n  $herman: map-merge($herman, $nested) !global;\n}\n\n\n// Accoutrement Add\n// ----------------\n/// Add [Accoutrement](http://oddbird.net/open-source/accoutrement/)\n/// map-partials to both the Herman export map and\n/// the appropriate global Accoutrement map variable –\n/// e.g. colors are added to both `$herman` (compiled)\n/// and `$colors` (raw).\n/// @group api_sass-utilities\n/// @param {String} $type -\n///   The type of map being added,\n///   e.g. `colors`, `fonts`,\n///   `sizes`, or `ratios`.\n/// @param {String} $key -\n///   A key name for accessing this data in JSON —\n///   should match the variable name,\n///   unless otherwise set in the `@preview` annotation\n/// @param {Map} $map -\n///   A map of name/value pairs,\n///   based on the Accoutrement syntax\n/// @output\n///   Updated `$herman` map, ready for JSON export\n/// @example scss\n///   $brand-colors: (\n///     'brand-blue': hsl(195, 85%, 35%),\n///     'light-gray': 'brand-blue' ('tint': 80%, 'desaturate': 80%),\n///   );\n///\n///   @include accoutrement-add('color', 'brand-colors', $brand-colors);\n///\n///   /* Herman: */\n///   /* #{$herman} */\n///   /* --- */\n///   /* Accoutrement-Colors: */\n///   /* #{$colors} */\n@mixin accoutrement-add(\n  $type,\n  $key,\n  $map\n) {\n  // pluralize type\n  $type: map-get($_herman-plural-types, $type) or $type;\n\n  // find the proper accoutrement function\n  $call: map-get($_herman-accoutrement-per-type, $type);\n\n  // get-function, as needed\n  $get: function-exists('get-function');\n  $call: if($get and $call, get-function($call), $call);\n\n  // merge into accoutrement-maps\n  @if ($type == 'colors') {\n    $colors: map-merge($colors, $map) !global;\n  } @else if ($type == 'sizes') {\n    $sizes: map-merge($sizes, $map) !global;\n  } @else if ($type == 'ratios') {\n    $ratios: map-merge($ratios, $map) !global;\n  } @else if ($type == 'fonts') {\n    $fonts: map-merge($fonts, ($key: $map)) !global;\n  }\n\n  // send proper arguments to herman-add\n  $args: ($type, $key, $map);\n  $args: if($call, append($args, $call), $args);\n  @include herman-add($args...);\n}\n\n\n// Map Compile\n// -----------\n/// Pass the values of any map through a given function\n/// (with optional arguments)\n/// and return the compiled map.\n/// This is used by `herman-add` and `accoutrement-add`,\n/// but can also be accessed directly.\n///\n/// @group api_sass-utilities\n///\n/// @param {Map} $map -\n///   A sass map with values that need to be compiled,\n///   such as Accoutrement Colors or Sizes with adjustments\n/// @param {String | Function} $function -\n///   The function (or function name) to use in compiling values,\n///   such as Accoutrement `color` and `size` functions\n/// @param {Arglist} $args… -\n///   Pass in any additional arguments for the function\n/// @return {String | Any} -\n///   An updated map,\n///   with values compiled by a third-party function,\n///   and converted to json-ready strings\n/// @example scss\n///   $brand-colors: (\n///     'brand-orange': hsl(24, 100%, 39%),\n///     'brand-blue': hsl(195, 85%, 35%),\n///     'light-gray': 'brand-blue' ('tint': 80%, 'desaturate': 80%),\n///   );\n///   /* #{herman-map-compile($brand-colors, 'color')} */\n@function herman-map-compile(\n  $map,\n  $function,\n  $args...\n) {\n  $output: ();\n\n  @each $key, $value in $map {\n    @if length($args) > 0 {\n      $value: append((), $value);\n      $value: join($value, $args);\n      $value: call($function, $value...);\n    } @else {\n      $value: call($function, $value);\n    }\n\n    $value: _herman-inspect($value);\n    $output: map-merge($output, ($key: $value));\n  }\n\n  @return $output;\n}\n\n\n\n// Herman Inspect\n// --------------\n/// Convert any value into a json-export-ready string\n/// @group api_sass-utilities\n/// @access private\n/// @param $value -\n///   Any sass value to convert\n/// @return {String} -\n///   A string reprepesentation of the given value,\n///   with leading zeros on numbers,\n///   and quotes escaped for JSON\n@function _herman-inspect(\n  $value\n) {\n  $value: inspect($value);\n\n  @if str-index($value, '.') == 1 {\n    $value: '0' + $value;\n  }\n\n  @if str-index($value, '\"') {\n    $value: _herman-str-replace($value, '\"', '\\\\\"', true);\n  }\n\n  @return $value;\n}\n\n\n// String Replace\n// --------------\n/// Return a string, with a substring replaced\n/// @group api_sass-utilities\n/// @access private\n/// @param {String} $string -\n///   The base string to be manipulated\n/// @param {String} $old -\n///   A sub-string to look for, and replace,\n///   inside the base string\n/// @param {String} $new -\n///   A sub string to insert\n///   in place of the `$old` string\n/// @param {Boolean} $replace-all [false] -\n///   Replace all instances of the `$old` string\n///   or just the first instance?\n/// @return {String} -\n///   Return the base string,\n///   with one or more instances of a substring replaced\n@function _herman-str-replace(\n  $string,\n  $old,\n  $new: null,\n  $replace-all: false\n) {\n  $return: $string;\n  $i: str-index($string, $old);\n  $n: str-length($old);\n\n  @if $string == $old {\n    $return: $new;\n  } @else if $i {\n    $a: if($i > 1, str-slice($string, 1, $i - 1), '');\n    $z: str-slice($string, $i + $n);\n\n    @if $replace-all {\n      $z: _herman-str-replace($z, $old, $new, true);\n    }\n\n    $return: $a + if($new, $new, '') + $z;\n  }\n\n  @return $return;\n}\n","// Colors\n// ======\n\n\n$color-fun: if(function-exists('get-function'), get-function('color'), 'color');\n\n\n// Brand Colors\n// ------------\n/// @group color\n/// @preview color-palette\n$brand-colors: (\n  'brand-blue': hsl(195, 52%, 31%),\n  'brand-orange': hsl(24, 100%, 62%),\n  'brand-pink': hsl(330, 100%, 45%),\n);\n\n@include add-colors($brand-colors);\n@include herman-add('colors', 'brand-colors', $brand-colors, $color-fun);\n","// Scales\n// ======\n\n\n$ratio-fun: if(function-exists('get-function'), get-function('ratio'),'ratio');\n$size-fun: if(function-exists('get-function'), get-function('size'),'size');\n\n\n// Ratios\n// ------\n/// @group scale\n/// @preview ratios\n$text-scale: (\n  'text-ratio': 1.4,\n);\n\n$ratios: map-merge($ratios, $text-scale);\n@include herman-add('ratios', 'text-scale', $text-scale, $ratio-fun);\n\n\n// Text Sizes\n// ----------\n/// @group scale\n/// @preview sizes;\n$text-sizes: (\n  'root': 18px,\n  'small': 'root' ('text-ratio': -1),\n  'medium': 'root' ('text-ratio': 0.7),\n  'caption': 'root',\n  'task': 'root' ('text-ratio': -0.125),\n  'social': 'root' ('text-ratio': -0.25),\n);\n\n$sizes: map-merge($sizes, $text-sizes);\n@include herman-add('sizes', 'text-sizes', $text-sizes, $size-fun);\n","// Fonts Config\n// ============\n\n\n$font-formats: 'woff2' 'woff' 'ttf';\n\n\n// TypeKit Font\n// ------------\n/// A font imported from typekit.\n///\n/// @group fonts\n/// @preview font-specimen; key: typekit; show: regular, italic, bold, bold italic\n$typekit-font: (\n  'name': 'freight-text-pro',\n  'stack': (Baskerville, Palatino, Cambria, Georgia, serif),\n  'source': 'https://typekit.com/fonts/freight-text',\n);\n\n@include add-font('typekit', $typekit-font);\n@include herman-add('font', 'typekit', $typekit-font);\n\n\n// Google Font\n// -----------\n/// A font imported from google fonts.\n///\n/// @preview font-specimen; key: google; show: regular, bold, italic, bold italic\n/// @group fonts\n$google-font: (\n  'name': 'Source Sans Pro',\n  'source': 'https://fonts.google.com/specimen/Source+Sans+Pro',\n  'stack': ('Helvetica Neue', 'Helvetica', 'Arial', sans-serif),\n);\n\n@include add-font('google', $google-font);\n@include herman-add('font', 'google', $google-font);\n\n\n// Google Font\n// -----------\n/// A locally-hosted font.\n///\n/// @preview font-specimen; key: local\n/// @group fonts\n$local-font: (\n  'name': 'rockingham',\n  'regular': 'rockingham/rockingham-regular-webfont',\n  'bold': 'rockingham/rockingham-bold-webfont',\n  'italic': 'rockingham/rockingham-italic-webfont',\n  'bold' 'italic': 'rockingham/rockingham-bolditalic-webfont',\n  'stack': ('Helvetica Neue', Helvetica, Arial, sans-serif),\n);\n\n@include add-font('local', $local-font);\n@include herman-add('font', 'local', $local-font);\n"],"names":[],"mappings":"AYWI,g9BAA4B"}