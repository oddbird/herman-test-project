{"version":3,"file":"json.css","sources":["json.scss","../node_modules/sass-json-export/stylesheets/sass-json-export.scss","../node_modules/sass-json-export/stylesheets/encode/encode.scss","../node_modules/sass-json-export/stylesheets/encode/helpers/_quote.scss","../node_modules/sass-json-export/stylesheets/encode/types/_bool.scss","../node_modules/sass-json-export/stylesheets/encode/types/_color.scss","../node_modules/sass-json-export/stylesheets/encode/types/_list.scss","../node_modules/sass-json-export/stylesheets/encode/types/_map.scss","../node_modules/sass-json-export/stylesheets/encode/types/_number.scss","../node_modules/sass-json-export/stylesheets/encode/types/_string.scss","../node_modules/sass-json-export/stylesheets/encode/types/_null.scss","../node_modules/sass-json-export/stylesheets/encode/api/_json.scss","../node_modules/sass-json-export/stylesheets/encode/mixins/_json.scss"],"sourcesContent":["// Export Sass to JSON\n// ===================\n\n@import '../node_modules/sass-json-export/stylesheets/sass-json-export';\n\n// @include json-encode($herman, comment);\n","// Encoder\n@import 'encode/encode';\n","// Helpers\n@import 'helpers/quote';\n\n// Type specific encoding functions\n@import 'types/bool';\n@import 'types/color';\n@import 'types/list';\n@import 'types/map';\n@import 'types/number';\n@import 'types/string';\n@import 'types/null';\n\n// Public API\n@import 'api/json';\n\n// Mixin to pass the string to the DOM\n@import 'mixins/json';\n","/// Proof quote a value\n/// @access private\n/// @param {*} $value - value to be quoted\n/// @return {String} - quoted value\n\n@function _proof-quote($value) {\n  // $value: to-string($value);\n  @return '\"#{$value}\"';\n}\n","/// Encode a bool to JSON\n/// @access private\n/// @param {Bool} $bool - bool to be encoded\n/// @return {Bool} - encoded bool\n@function _json-encode--bool($boolean) {\n  @return $boolean;\n}\n","/// Encode a color to JSON\n/// @access private\n/// @param {Color} $color - color to be encoded\n/// @return {String} - encoded color\n/// @require {function} _proof-quote\n@function _json-encode--color($color) {\n  @return _proof-quote($color);\n}\n","/// Encode a list to JSON\n/// @access private\n/// @param {List} $list - list to be encoded\n/// @return {String} - encoded list\n/// @require {function} json-encore\n@function _json-encode--list($list) {\n  $str: '';\n\n  @each $item in $list {\n    $str: $str + ', ' + json-encode($item);\n  }\n\n  @return '[' + str-slice($str, 3) + ']';\n}\n","/// Encode a map to JSON\n/// @access private\n/// @param {Map} $map - map to be encoded\n/// @return {String} - encoded map\n/// @require {function} _proof-quote\n/// @require {function} json-encode\n@function _json-encode--map($map) {\n  $str: '';\n\n  @each $key, $value in $map {\n    $str: $str + ', ' + _proof-quote($key) + ': ' + json-encode($value);\n  }\n\n  @return '{' + str-slice($str, 3) + '}';\n}\n","/// Encode a number to JSON\n/// @access private\n/// @param {Number} $number - number to be encoded\n/// @return {String} - encoded number\n/// @require {function} _proof-quote\n@function _json-encode--number($number) {\n  @return if(unitless($number), $number, _proof-quote($number));\n}\n","/// Encode a string to JSON\n/// @access private\n/// @param {String} $string - string to be encoded\n/// @return {String} - encoded string\n/// @require {function} _proof-quote\n@function _json-encode--string($string) {\n  @return _proof-quote($string);\n}\n","/// Encode `null` to JSON\n/// @access private\n/// @param {Null} $null - `null`\n/// @return {String}\n@function _json-encode--null($null) {\n  @return 'null';\n}\n","/// Delay the encoding of ta literal to JSON to a type-specific method\n/// @access public\n/// @param {*} $value - value to be stringified\n/// @throw Unknown type for #{$value} (#{$type}).\n/// @return {String} - JSON encoded string\n/// @require {function} _json-encode--string\n/// @require {function} _json-encode--number\n/// @require {function} _json-encode--list\n/// @require {function} _json-encode--map\n/// @require {function} _json-encode--null\n/// @require {function} _json-encode--color\n/// @require {function} _json-encode--bool\n@function json-encode($value) {\n  $type: type-of($value);\n\n  @if function-exists('_json-encode--#{$type}') {\n    @return call('_json-encode--#{$type}', $value);\n  }\n\n  @error 'Unknown type for #{$value} (#{$type}).';\n}\n","/// JSON.stringify a value and pass it as a font-family of head element\n/// @access public\n/// @param {*} $value - value to be stringified\n/// @param {String} $flag (all) - output driver\n/// @require {function} json-encode\n@mixin json-encode($value, $flag: 'all') {\n  $flag: if(index('all' 'regular' 'media' 'comment', $flag), $flag, 'all');\n  $json: json-encode($value);\n\n  // Persistent comment\n  @if $flag == 'comment' or $flag == 'all' {\n    /*! json-encode: #{$json} */\n  }\n  // Regular property value pair\n  @if $flag == 'regular' or $flag == 'all' {\n    // All browsers except IE8-\n    body {\n      &::before {\n        // This element must be in the render tree to get it via getComputedStyle(document.body, ':before');\n        content: json-encode($value);\n        display: block;\n        height: 0;\n        overflow: hidden;\n        width: 0;\n      }\n    }\n\n    // All browsers except Opera (Presto based)\n    head {\n      font-family: json-encode($value);\n    }\n  }\n\n  // Falsy media query\n  @if $flag == 'media' or $flag == 'all' {\n    @media -json-encode {\n      json {\n        json: $json;\n      }\n    }\n  }\n}\n"],"names":[],"mappings":""}